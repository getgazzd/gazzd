/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/address": {
    /**
     * Change the registered address for the logged in customer
     *
     * Access Right: logged in users
     */
    put: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            firstName: string;
            lastName: string;
            address1?: string;
            address2?: string;
            zipCode?: string;
            city?: string;
            state?: string;
            /** @description Country ISO 3166-1 alpha-2, for example SE */
            country?: string;
            phoneNumber?: string;
          };
        };
      };
    };
  };
  "/address-search": {
    /** Address lookup based on identity number, only supported via certain payment methods */
    post: {
      parameters: {};
      responses: {
        /** Successfully fetching the address */
        200: {
          content: {
            "application/json": {
              address?: {
                company?: string;
                firstName?: string;
                lastName?: string;
                address1?: string;
                zipCode?: string;
                city?: string;
                /** @description Country ISO 3166-1 alpha-2, for example SE */
                country?: string;
              };
            };
          };
        };
        /** When payment method was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** When identity number was not found using the plugin */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Address search is not implemented for the specified payment method */
        503: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                paymentMethod?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description Personal identity number/Social security number.,
             *                         Swedish/Norwegian/Danish social security number/personnummer
             */
            identityNumber: string;
            paymentMethod?: string;
          };
        };
      };
    };
  };
  "/allocation-rule/{id}": {
    /**
     * Set allocation rule to request for fulfillment of order
     *
     * Access Right: required shared secret
     */
    put: {
      parameters: {
        path: {
          /** Integer. Allocation rule ID */
          id: string;
        };
      };
      responses: {
        /** Adding allocation rule to selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** Not Authorized */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Allocation rule not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** No active selection */
        "x-alternate-404-1": {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
  };
  "/back-in-stock-subscription": {
    /** Subscribe to back in stock notification */
    post: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description E-mail address. Required only for not logged in customers */
            email?: string;
            shipTo: {
              /** @description Country ISO 3166-1 alpha-2, for example SE */
              country: string;
              /**
               * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
               *         When used as input, the correct description of the state will also be allowed.. Required only for countries with states
               */
              state?: string;
            };
            /** @description Product Item ID */
            item: string;
            /** @description Language ID */
            language?: string;
          };
        };
      };
    };
  };
  "/brands": {
    /**
     * List of all brands. Requires shared secret
     *
     * Access Right: required shared secret
     */
    get: {
      parameters: {};
      responses: {
        /** Fetching all brands */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              brands?: components["schemas"]["BrandModel"][];
            };
          };
        };
        /** Wrong shared secret. */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                accessRight?: string;
              };
            };
          };
        };
      };
    };
  };
  "/brick-and-mortar": {
    /** Get a list of available brick and mortars */
    get: {
      parameters: {};
      responses: {
        /** Fetching Brick and mortars. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              brickAndMortars?: components["schemas"]["BrickAndMortarModel"];
            };
          };
        };
        /** Fetching Brick and mortars in authorized mode. */
        "x-alternate-200-1": {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              brickAndMortars?: components["schemas"]["BrickAndMortarAuthModel"];
            };
          };
        };
      };
    };
  };
  "/brick-and-mortar/{id}": {
    /** Get a single brick and mortars */
    get: {
      parameters: {
        path: {
          /** Integer. Brick and mortar ID */
          id: string;
        };
      };
      responses: {
        /** Fetching single Brick and mortar. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              brickAndMortar?: components["schemas"]["BrickAndMortarModel"];
            };
          };
        };
        /** Brick and mortar could not be found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Fetching single Brick and mortar in Authorized mode. */
        "x-alternate-200-1": {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              brickAndMortar?: components["schemas"]["BrickAndMortarAuthModel"];
            };
          };
        };
      };
    };
    /** Set Brick and mortar to request for fulfillment of order */
    put: {
      parameters: {
        path: {
          /** Integer. Brick and mortar ID */
          id: string;
        };
      };
      responses: {
        /** Added brick and mortar to selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** Brick and mortar not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Brick and mortar missing data */
        412: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** No active selection */
        "x-alternate-404-1": {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
  };
  "/bundles/{product}": {
    /** Fetch bundle information about a product */
    get: {
      parameters: {
        path: {
          /** string. Product Item ID */
          product: string;
        };
      };
      responses: {
        /** Fetch bundle information about a product */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              bundle?:
                | components["schemas"]["BundleModel"]
                | components["schemas"]["BundleAllModel"];
              sectionProducts?:
                | components["schemas"]["ProductModel"]
                | components["schemas"]["ProductAllModel"];
            };
          };
        };
        /** Bundles are not enabled in the plugin */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Product was not a bundle */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
    /** Fetch bundle information about a product */
    post: {
      parameters: {
        path: {
          /** string. Product Item ID */
          product: string;
        };
      };
      responses: {
        /** Fetch bundle information about a product */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              bundle?:
                | components["schemas"]["BundleModel"]
                | components["schemas"]["BundleAllModel"];
              sectionProducts?:
                | components["schemas"]["ProductModel"]
                | components["schemas"]["ProductAllModel"];
            };
          };
        };
        /** Bundles are not enabled in the plugin */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Product was not a bundle */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Language ID, if not provided the current session language is used */
            language?: string;
            /** @description Integer or string "all". Market ID. Requires shared secret */
            market?: string | number;
            /** @description Integer or string "all". Pricelist ID. Requires shared secret */
            pricelist?: string | number;
            includeSectionProducts?: boolean;
          };
        };
      };
    };
  };
  "/campaign-site": {
    /**
     * Use this when a customer visits a campaign site.
     *         Send the campaign specific URI part of the URL as the "uri". This could modify the current market
     *         of the session
     */
    put: {
      parameters: {};
      responses: {
        /** Modify the campaign site for the current session. */
        200: {
          content: {
            "application/json": {
              campaignSite?: {
                /** @description URI for the campaign site */
                uri?: string;
                /** @description URL to redirect the customer to */
                goTo?: string;
                /** @description Name of the campaign site */
                name?: string;
              };
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              selection?: components["schemas"]["SelectionModel"];
              /** @description All available languages */
              languages?: components["schemas"]["LanguageModel"][];
              /** @description All available payment methods for current selection */
              paymentMethods?: components["schemas"]["PaymentMethodModel"][];
              paymentFields?: components["schemas"]["PaymentFieldsModel"];
              /** @description All available shipping methods for current selection */
              shippingMethods?: components["schemas"]["ShippingMethodModel"][];
              /** @description All shippable countries */
              countries?: components["schemas"]["CountryShippableModel"][];
              /** @description Optional. If the current session contains a logged in customer */
              loggedIn?: components["schemas"]["LoggedInModel"];
              /** @description Current location data for the session */
              location?: components["schemas"]["LocationModel"];
            };
          };
        };
        /** When campaign site was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                uri?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            uri: string;
          };
        };
      };
    };
  };
  "/categories": {
    /** List of all categories */
    get: {
      parameters: {};
      responses: {
        /** Fetching all categories. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              categories?: components["schemas"]["CategoryModel"][];
            };
          };
        };
        /** Fetching categories using pricelist/market without shared secret */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
    /** List of all categories */
    post: {
      parameters: {};
      responses: {
        /** Fetching all categories. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              categories?: components["schemas"]["CategoryModel"][];
            };
          };
        };
        /** Fetching categories using pricelist/market without shared secret */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Language ID, if not provided the current session language is used */
            language?: string;
            /** @description Integer. Market ID. Requires shared secret */
            market?: number;
            /** @description Integer. Pricelist ID. Requires shared secret */
            pricelist?: number;
          };
        };
      };
    };
  };
  "/cms/articles": {
    /** Fetch CMS articles, possible to filter them based on search criteria */
    post: {
      parameters: {};
      responses: {
        /** Successfully fetching CMS-articles */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              articles?: components["schemas"]["CmsArticleModel"][];
              /** @description Integer. Total amount of articles matching the search criteria */
              count?: number;
            };
          };
        };
        /** Filtering on market if shared secret was not used */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** CMS module is not in use */
        503: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                cms?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Integer. skip the first number of products, useful with limit */
            skipFirst?: number;
            /** @description Integer. return no more than this number of products */
            limit?: number;
            /** @description article ids */
            articles?: string[];
            uri?: string;
            section?: string;
            /** @description date YYYY-MM-DD like 2015-12-24 */
            dateAtOrAfter?: string;
            /** @description date YYYY-MM-DD like 2015-12-24 */
            dateAtOrBefore?: string;
            author?: string;
            categories?: string[];
            /** @description Free text search */
            search?: string;
            products?: string[];
            tags?: string[];
            sortOrder?: {
              /**
               * @description Possible values: 'article', 'title', 'listTitle', 'date', 'authorName', 'section'
               * @enum {string}
               */
              field:
                | "article"
                | "title"
                | "listTitle"
                | "date"
                | "authorName"
                | "section";
              /**
               * @description Possible values: 'asc', 'desc'. Default is ascending, from lowest to highest
               * @enum {string}
               */
              order?: "asc" | "desc";
            }[];
            /** @description Language ID, if not provided the current session language is used */
            language?: string;
            /** @description Integer. Market ID. Requires shared secret */
            market?: number;
            /** @description Integer. Pricelist ID. Requires shared secret */
            pricelist?: number;
          };
        };
      };
    };
  };
  "/collections": {
    /**
     * List of all collections. Requires shared secret
     *
     * Access Right: required shared secret
     */
    get: {
      parameters: {};
      responses: {
        /** Fetching all collections */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              collections?: components["schemas"]["CollectionModel"][];
            };
          };
        };
        /** Wrong shared secret. */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                accessRight?: string;
              };
            };
          };
        };
      };
    };
  };
  "/countries": {
    /**
     * List of countries that the store ships to
     *
     * Access Right: optional shared secret to retrieve additional properties
     */
    get: {
      parameters: {};
      responses: {
        /** Fetching all shippable countries. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              countries?: components["schemas"]["CountryShippableAuthorizedModel"][];
            };
          };
        };
      };
    };
  };
  "/countries/all": {
    /**
     * List of all countries, shipTo:true on the ones being set up to ship to. Requires shared secret
     *
     * Access Right: required shared secret
     */
    get: {
      parameters: {};
      responses: {
        /** Fetching all countries including defaultLocation to use when country was not found */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              countries?: components["schemas"]["CountryAuthorizedModel"][];
              /** @description Contains the default settings for a customer where country cannot be determined. */
              defaultLocation?: {
                /** @description Currency code (ISO 4217). Fallback currency for this store */
                currency?: string;
                /** @description Language ID. Fallback language for this store */
                language?: string;
                /** @description Market ID. Fallback market for this store */
                market?: number;
                /** @description Pricelist ID. Fallback pricelist for this store */
                pricelist?: number;
              };
            };
          };
        };
        /** Wrong shared secret. */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                accessRight?: string;
              };
            };
          };
        };
      };
    };
  };
  "/countries/auto": {
    /**
     * Find the country code based on the IP of the visitor. Often used when proxies are used inbetween the customer and this API. It supports sending the IP with a `X-Forwarded-For`-header only for this endpoint.
     *                The header supports both IPv6 and IPv4. If a token is not provided to this endpoint, it will give you a token back with the
     *                country/language already set to the country/language in the response. If shared secret is used you also get market/pricelist information
     *
     * Access Right: optional shared secret to retrieve additional properties
     */
    get: {
      parameters: {};
      responses: {
        /** Find current country based on GeoIP-data. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              country?: components["schemas"]["CountryAuthorizedModel"];
            };
          };
        };
        /** When the GeoIP lookup does not find a country. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                country_find?: string;
              };
              /**
               * @description Empty country property
               * @example
               */
              country?: string[];
            };
          };
        };
      };
    };
  };
  "/countries/{country}": {
    /** Change country of the current selection */
    put: {
      parameters: {
        path: {
          /** Country ISO 3166-1 alpha-2, for example SE */
          country: string;
        };
      };
      responses: {
        /** Modify the country/language for the current session. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When country or state was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If country was not found */
                country?: string;
                /** @description If state was not found */
                state?: string;
                /** @description If language was not found */
                language?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
             *         When used as input, the correct description of the state will also be allowed.. For countries with states
             */
            state?: string;
            /** @description Language ID */
            language?: string;
          };
        };
      };
    };
  };
  "/countries/{country}/states/{state}": {
    /** Change country of the current selection */
    put: {
      parameters: {
        path: {
          /** Country ISO 3166-1 alpha-2, for example SE */
          country: string;
          /**
           * State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
           *         When used as input, the correct description of the state will also be allowed.. For countries with states
           */
          state: string;
        };
      };
      responses: {
        /** Modify the country/language for the current session. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When country or state was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If country was not found */
                country?: string;
                /** @description If state was not found */
                state?: string;
                /** @description If language was not found */
                language?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Language ID */
            language?: string;
          };
        };
      };
    };
  };
  "/customer": {
    /**
     * Get information for the currently logged in customer
     *
     * Access Right: logged in users
     */
    get: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
  };
  "/customer/contracts/{contract}/subscription": {
    /**
     * Allows adding a subscription to an existing contract.
     *
     * Access Right: logged in users
     */
    post: {
      parameters: {
        path: {
          /** The ID of a subscription contract */
          contract: string;
        };
      };
      responses: {
        /** Subscription added */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              contracts?: {
                /** @description Integer */
                contract?: number;
                created?: string;
                updated?: string;
                /** @description Integer */
                originatingOrder?: number;
                shippingAddress?: {
                  firstName?: string;
                  lastName?: string;
                  email?: string;
                  phoneNumber?: string;
                  address1?: string;
                  address2?: string;
                  zipCode?: string;
                  city?: string;
                  state?: string;
                  country?: string;
                };
                subscriptionPayment?: {
                  description?: string;
                  status?: string;
                  created?: string;
                  updated?: string;
                };
                /** @description Integer */
                market?: number;
                /** @description Integer */
                pricelist?: number;
                subscriptions?: {
                  /** @description Integer */
                  subscription?: number;
                  /** @description Integer */
                  contract?: number;
                  created?: string;
                  updated?: string;
                  status?: string;
                  /** @description Deprecated. Use `subscriptionPlan` property instead. */
                  interval?: {
                    type?: string;
                    /** @description Integer */
                    value?: number;
                  };
                  subscriptionPlan?: {
                    name?: string;
                    /** @description Number. Number between 0 and 100 inclusive. */
                    discountPercent?: number;
                    /**
                     * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
                     * @enum {string}
                     */
                    interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
                    /**
                     * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
                     * @enum {string}
                     */
                    intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
                    /** @description Integer. Deprecated. Use `intervalValue` instead. */
                    value?: number;
                    /** @description Integer */
                    intervalValue?: number;
                  };
                  nextScheduledOrder?: string;
                  nextAttemptedOrder?: string;
                  attentionFlags?: {
                    paymentDeclined?: boolean;
                    paymentRevoked?: boolean;
                    outOfStock?: boolean;
                  };
                  item?: {
                    item?: string;
                    /** @description Integer */
                    quantity?: number;
                    size?: string;
                    sku?: string;
                    ean?: string;
                    silkVariant?: string;
                    silkProduct?: string;
                    priceEach?: string;
                    /** @description Number */
                    priceEachAsNumber?: number;
                    totalPrice?: string;
                    /** @description Number */
                    totalPriceAsNumber?: number;
                    priceEachBeforeDiscount?: string;
                    /** @description Number */
                    priceEachBeforeDiscountAsNumber?: number;
                    anyDiscount?: boolean;
                    totalPriceBeforeDiscount?: string;
                    /** @description Number */
                    totalPriceBeforeDiscountAsNumber?: number;
                  };
                }[];
              }[];
            };
          };
        };
        /** Not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Not Acceptable */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Product Item ID */
            item: string;
            /** @description The ID of subscription plan */
            subscriptionPlan: string;
            /** @description integer, minimum 1 */
            quantity?: number;
            /** @description date YYYY-MM-DD like 2015-12-24 (must be in the future) */
            nextOrderDate: string;
          };
        };
      };
    };
  };
  "/customer/contracts/{contract}/subscription/{subscription}": {
    /**
     * Update subscription quantity.
     *
     * Access Right: logged in users
     */
    put: {
      parameters: {
        path: {
          /** The ID of a subscription contract */
          contract: string;
          /** The ID of a subscription */
          subscription: string;
        };
      };
      responses: {
        /** Update subscription quantity */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /** @description Integer */
              contract?: number;
              created?: string;
              updated?: string;
              /** @description Integer */
              originatingOrder?: number;
              shippingAddress?: {
                firstName?: string;
                lastName?: string;
                email?: string;
                phoneNumber?: string;
                address1?: string;
                address2?: string;
                zipCode?: string;
                city?: string;
                state?: string;
                country?: string;
              };
              subscriptionPayment?: {
                description?: string;
                status?: string;
                created?: string;
                updated?: string;
              };
              /** @description Integer */
              market?: number;
              /** @description Integer */
              pricelist?: number;
            };
          };
        };
        /** not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** wrong input */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description integer, minimum 1 */
            quantity: number;
          };
        };
      };
    };
  };
  "/customer/stored/payment": {
    /**
     * Initiate stored payment update process.
     *
     * Access Right: logged in users
     */
    post: {
      parameters: {};
      responses: {
        /** Stored payment update initialization response */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /**
               * @description Possible values: 'form', 'redirect'. Type of payment action based on payment method
               * @enum {string}
               */
              action?: "form" | "redirect";
              /**
               * @description Optional. If action=form,
               *                             this field contains the HTML including scripts that will automatically initiate
               *                             finalization of the payment. It could either make a form that submits data, or an inline
               *                             HTML for launching a checkout from a payment provider
               */
              formHtml?: string;
              /**
               * @description Optional. If action=redirect. The URL to redirect the customer to
               *                         for finalization of the payment
               */
              url?: string;
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Array of integer ids */
            contracts: number;
            paymentMethod: string;
            /** @description URL to redirect the customer to for validating the payment */
            paymentReturnPage?: string;
            /** @description URL to redirect the customer to if payment fails */
            paymentFailedPage?: string;
            /** @description `window.origin` where the checkout is located. Used for more modern payment checkout methods where the current origin of the checkout needs to be validated properly. */
            paymentCheckoutOrigin?: string;
            /**
             * @description Each payment plugin can require specific parameters to be sent. These parameters should be
             *                         sent inside this property
             */
            paymentMethodSpecificFields?: {
              [key: string]: components["schemas"]["AnyValue"];
            };
            shippingAddress?: {
              [key: string]: components["schemas"]["AnyValue"];
            };
          };
        };
      };
    };
  };
  "/customer/stored/payment-methods": {
    /**
     * Get stored payment methods available for logged in customer.
     *
     * Access Right: logged in users
     */
    post: {
      parameters: {};
      responses: {
        /** Get stored payment methods available for customer */
        200: {
          content: {
            "application/json": { [key: string]: { [key: string]: string } };
          };
        };
        /** not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
            token?: string;
            /** @description The ID of a subscription contract */
            contract?: string;
          };
        };
      };
    };
  };
  "/customer/stored/payment-result": {
    /**
     * Verifies stored payment update process result.
     *
     * Access Right: logged in users
     */
    post: {
      parameters: {};
      responses: {
        /** Check stored payment result */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              status?: string;
            };
          };
        };
        /** not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description Every query string parameter combined with
             *                             POST-parameters receieved to the paymentReturnPage.
             *                             All of these are needed to validate if the
             *                             payment was successful or not
             */
            paymentMethodFields: {
              [key: string]: components["schemas"]["AnyValue"];
            };
          };
        };
      };
    };
  };
  "/customer/subscriptions": {
    /**
     * Customer subscriptions for currently logged in user.
     *
     * Access Right: logged in users
     */
    post: {
      parameters: {};
      responses: {
        /** Update subscription address */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              contracts?: {
                /** @description Integer */
                contract?: number;
                created?: string;
                updated?: string;
                /** @description Integer */
                originatingOrder?: number;
                shippingAddress?: {
                  firstName?: string;
                  lastName?: string;
                  email?: string;
                  phoneNumber?: string;
                  address1?: string;
                  address2?: string;
                  zipCode?: string;
                  city?: string;
                  state?: string;
                  country?: string;
                };
                subscriptions?: {
                  /** @description Integer */
                  subscription?: number;
                  /** @description Integer */
                  contract?: number;
                  created?: string;
                  updated?: string;
                  status?: string;
                  /** @description Deprecated. Use `subscriptionPlan` property instead. */
                  interval?: {
                    type?: string;
                    /** @description Integer */
                    value?: number;
                  };
                  subscriptionPlan?: {
                    name?: string;
                    /** @description Number. Number between 0 and 100 inclusive. */
                    discountPercent?: number;
                    /**
                     * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
                     * @enum {string}
                     */
                    interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
                    /**
                     * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
                     * @enum {string}
                     */
                    intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
                    /** @description Integer. Deprecated. Use `intervalValue` instead. */
                    value?: number;
                    /** @description Integer */
                    intervalValue?: number;
                  };
                  nextScheduledOrder?: string;
                  nextAttemptedOrder?: string;
                  attentionFlags?: {
                    paymentDeclined?: boolean;
                    paymentRevoked?: boolean;
                    outOfStock?: boolean;
                  };
                  item?: {
                    item?: string;
                    /** @description Integer */
                    quantity?: number;
                    size?: string;
                    sku?: string;
                    ean?: string;
                    silkVariant?: string;
                    silkProduct?: string;
                    priceEach?: string;
                    /** @description Number */
                    priceEachAsNumber?: number;
                    totalPrice?: string;
                    /** @description Number */
                    totalPriceAsNumber?: number;
                    priceEachBeforeDiscount?: string;
                    /** @description Number */
                    priceEachBeforeDiscountAsNumber?: number;
                    anyDiscount?: boolean;
                    totalPriceBeforeDiscount?: string;
                    /** @description Number */
                    totalPriceBeforeDiscountAsNumber?: number;
                  };
                }[];
                subscriptionPayment?: {
                  description?: string;
                  status?: string;
                  created?: string;
                  updated?: string;
                };
              }[];
            };
          };
        };
        /** not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Number */
            limit?: number;
            /** @description Number */
            page?: number;
          };
        };
      };
    };
  };
  "/customer/update": {
    /**
     * Update information for the currently logged in customer
     *
     * Access Right: logged in users
     */
    put: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description E-mail address */
            newEmail?: string;
            firstName: string;
            lastName: string;
            address1?: string;
            address2?: string;
            zipCode?: string;
            city?: string;
            state?: string;
            /** @description Country ISO 3166-1 alpha-2, for example SE */
            country?: string;
            phoneNumber?: string;
            /** @description When true customer is subscribed to newsletter after registration */
            newsletter?: boolean;
            gender?: string;
            /** @description anything */
            customerClubFields?: { [key: string]: unknown };
            /** @description Optional consents the customer is consenting to */
            consents?: {
              /** @description Consent key/type */
              key: string;
              /** @description Did the customer consent to this? */
              consented: boolean;
              /** @description Short name describing the consent */
              name?: string;
              /** @description Consent description */
              text?: string;
              /** @description Which version of the consent is this */
              version?: string;
              /** @description Which language does this consent use */
              language?: string;
            }[];
            /** @description Client specific attributes */
            customAttributes?: {
              /** @description anything */
              voyado_customer_id?: { [key: string]: unknown };
              /** @description anything */
              voyado_exported_historical_data?: { [key: string]: unknown };
            };
          };
        };
      };
    };
  };
  "/email": {
    /**
     * Change the login email for the currently logged in customer
     *
     * Access Right: logged in users
     */
    put: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description E-mail address */
            newEmail: string;
          };
        };
      };
    };
  };
  "/fulfillment-check": {
    /** Check which brick and mortars can fulfill the current selection, return sorted by stock level */
    post: {
      parameters: {};
      responses: {
        /** Fetching Brick and mortars. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /** @description Integer. List of available brick and mortars sorted */
              brickAndMortars?: number[];
            };
          };
        };
        /** No items in the current selection */
        412: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                selection?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Integer. List of brick and mortars to check */
            brickAndMortars: number[];
          };
        };
      };
    };
  };
  "/gift-certificates": {
    /** Get all gift certificates or one specific. Needs gift certificate endpoints to be enabled in the plugin */
    get: {
      parameters: {};
      responses: {
        /** Fetching all available gift certificates. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              giftCertificates?: {
                /** @description Id of gift certificate */
                giftCertificate?: string;
                /** @description Name of gift certificate */
                name?: string;
                /**
                 * @description If the gift certificate should
                 *                                     generate the discount in multiple currencies or not. Default `false`. Requires shared secret.
                 */
                currencyOfSaleOnly?: boolean;
                /**
                 * @description If the amount will be shown on the gift certificate.
                 *                                     If the amount equals a pack, this could be set as `false` to only show the name of the gift certificate. Requires shared secret.
                 */
                showGiftAmount?: boolean;
                /**
                 * @description Possible values: 'predeterminedAmount', 'anyAmount'. `predeterminedAmount` has a defined amount for each currency set.
                 *                                     `anyAmount` can be used to decide on a specific amount.
                 * @enum {string}
                 */
                type?: "predeterminedAmount" | "anyAmount";
                /** @description The amount specified in the current session (When no shared secret is used) */
                amount?: {
                  /** @description Value in the current currency, formatted */
                  amount?: string;
                  /** @description Number. Value in the current currency as a number */
                  amountAsNumber?: number;
                };
                /** @description The amount specified for each currency. Requires shared secret */
                amountByCurrency?: {
                  /** @description Currency code (ISO 4217) */
                  currency?: string;
                  /** @description Value in the current currency, formatted */
                  amount?: string;
                  /** @description Number. Value in the current currency as a number */
                  amountAsNumber?: number;
                }[];
              }[];
            };
          };
        };
        /** When gift certificates are not enabled in Checkout API */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                feature?: string;
              };
            };
          };
        };
      };
    };
  };
  "/gift-certificates/{giftCertificate}": {
    /** Get all gift certificates or one specific. Needs gift certificate endpoints to be enabled in the plugin */
    get: {
      parameters: {
        path: {
          /** string */
          giftCertificate: string;
        };
      };
      responses: {
        /** Fetching all available gift certificates. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              giftCertificates?: {
                /** @description Id of gift certificate */
                giftCertificate?: string;
                /** @description Name of gift certificate */
                name?: string;
                /**
                 * @description If the gift certificate should
                 *                                     generate the discount in multiple currencies or not. Default `false`. Requires shared secret.
                 */
                currencyOfSaleOnly?: boolean;
                /**
                 * @description If the amount will be shown on the gift certificate.
                 *                                     If the amount equals a pack, this could be set as `false` to only show the name of the gift certificate. Requires shared secret.
                 */
                showGiftAmount?: boolean;
                /**
                 * @description Possible values: 'predeterminedAmount', 'anyAmount'. `predeterminedAmount` has a defined amount for each currency set.
                 *                                     `anyAmount` can be used to decide on a specific amount.
                 * @enum {string}
                 */
                type?: "predeterminedAmount" | "anyAmount";
                /** @description The amount specified in the current session (When no shared secret is used) */
                amount?: {
                  /** @description Value in the current currency, formatted */
                  amount?: string;
                  /** @description Number. Value in the current currency as a number */
                  amountAsNumber?: number;
                };
                /** @description The amount specified for each currency. Requires shared secret */
                amountByCurrency?: {
                  /** @description Currency code (ISO 4217) */
                  currency?: string;
                  /** @description Value in the current currency, formatted */
                  amount?: string;
                  /** @description Number. Value in the current currency as a number */
                  amountAsNumber?: number;
                }[];
              }[];
            };
          };
        };
        /** When gift certificates are not enabled in Checkout API */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                feature?: string;
              };
            };
          };
        };
      };
    };
  };
  "/items/bundles/{item}": {
    /** add flexible bundle to selection */
    post: {
      parameters: {
        path: {
          /** Product Item ID. The item of the bundle product */
          item: string;
        };
      };
      responses: {
        /** Adding an item to the selection */
        201: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When item ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                item?: string;
              };
            };
          };
        };
        /** When input value is invalid. */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** When item ID could not be added. */
        412: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                item?: string;
              };
            };
          };
        };
        /** When selection could not be created. */
        500: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                server?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description number, minimum 1. defaults to 1 */
            quantity?: number;
            /** @description Rarely used comment that will end up on the order line */
            comment?: string;
            /** @description The URL to the product added, so the item can be linked back to its origin */
            productUrl?: string;
            /** @description number, minimum 1. The category id of the added product, so the item can be linked back to its origin */
            category?: number;
            /** @description The product selected for each section of the bundle */
            sections: {
              /** @description Section id */
              section: string;
              /** @description Product Item ID. The selected item for the section */
              item: string;
            }[];
            /** @description The ID of subscription plan */
            subscriptionPlan?: string;
          };
        };
      };
    };
  };
  "/items/gift-certificates/{giftCertificate}": {
    /**
     * Add a gift certificate to the selection.
     *         This will remove all other items or gift certificates from the selection. Needs gift certificate endpoints to be enabled in the plugin
     */
    post: {
      parameters: {
        path: {
          /** string */
          giftCertificate: string;
        };
      };
      responses: {
        /** Adding a gift certificate to the selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When gift certificates are not enabled in Checkout API */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                feature?: string;
              };
            };
          };
        };
        /** When gift certificate is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                giftCertificate?: string;
              };
            };
          };
        };
        /** When input value is invalid. */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description number, minimum 1. Required for anyAmount type gift certificates,
             *                         must not be sent for predeterminedAmount type gift certificates
             */
            amount?: number;
          };
        };
      };
    };
  };
  "/items/gift-certificates/{giftCertificate}/amount/{amount}": {
    /**
     * Add a gift certificate to the selection.
     *         This will remove all other items or gift certificates from the selection. Needs gift certificate endpoints to be enabled in the plugin
     */
    post: {
      parameters: {
        path: {
          /** string */
          giftCertificate: string;
          /**
           * number, minimum 1. Required for anyAmount type gift certificates,
           *                         must not be sent for predeterminedAmount type gift certificates
           */
          amount: string;
        };
      };
      responses: {
        /** Adding a gift certificate to the selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When gift certificates are not enabled in Checkout API */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                feature?: string;
              };
            };
          };
        };
        /** When gift certificate is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                giftCertificate?: string;
              };
            };
          };
        };
        /** When input value is invalid. */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
  };
  "/items/{item}": {
    /** Add item to the selection */
    post: {
      parameters: {
        path: {
          /** Product Item ID */
          item: string;
        };
      };
      responses: {
        /** Adding an item to the selection */
        201: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When comment is provided in client-side mode. */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                comment?: string;
              };
            };
          };
        };
        /** When item ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                item?: string;
              };
            };
          };
        };
        /** When input value is invalid. */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** If any products are unavailable */
        410: {
          content: {
            "application/json": {
              errors?: {
                stock?: string;
              };
              unavailable?: {
                /** @description Item ID */
                item?: string;
                /** @description Number. The original quantity before stock adjustment */
                originalQuantity?: number;
                /** @description Number. Quantity that was unavailable for this item */
                unavailable?: number;
                /** @description Number. The adjusted quantity for this item */
                available?: number;
                product?: components["schemas"]["ProductModel"];
              }[];
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              selection?: components["schemas"]["SelectionModel"];
              /** @description All available languages */
              languages?: components["schemas"]["LanguageModel"][];
              /** @description All available payment methods for current selection */
              paymentMethods?: components["schemas"]["PaymentMethodModel"][];
              paymentFields?: components["schemas"]["PaymentFieldsModel"];
              /** @description All available shipping methods for current selection */
              shippingMethods?: components["schemas"]["ShippingMethodModel"][];
              /** @description All shippable countries */
              countries?: components["schemas"]["CountryShippableModel"][];
              /** @description Optional. If the current session contains a logged in customer */
              loggedIn?: components["schemas"]["LoggedInModel"];
              /** @description Current location data for the session */
              location?: components["schemas"]["LocationModel"];
            };
          };
        };
        /** When item ID could not be added. */
        412: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                item?: string;
              };
            };
          };
        };
        /** When selection could not be created. */
        500: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                server?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description number, minimum 1. defaults to 1 */
            quantity?: number;
            /** @description The URL to the product added, so the item can be linked back to its origin */
            productUrl?: string;
            /** @description number, minimum 1. The category id of the added product, so the item can be linked back to its origin */
            category?: number;
            /** @description string. Requires shared secret. Comment that will end up on the order line */
            comment?: string;
            /** @description The ID of subscription plan */
            subscriptionPlan?: string;
          };
        };
      };
    };
  };
  "/items/{item}/quantity/{quantity}": {
    /** Add item to the selection */
    post: {
      parameters: {
        path: {
          /** Product Item ID */
          item: string;
          /** number, minimum 1. */
          quantity: string;
        };
      };
      responses: {
        /** Adding an item to the selection */
        201: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When comment is provided in client-side mode. */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                comment?: string;
              };
            };
          };
        };
        /** When item ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                item?: string;
              };
            };
          };
        };
        /** When input value is invalid. */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** If any products are unavailable */
        410: {
          content: {
            "application/json": {
              errors?: {
                stock?: string;
              };
              unavailable?: {
                /** @description Item ID */
                item?: string;
                /** @description Number. The original quantity before stock adjustment */
                originalQuantity?: number;
                /** @description Number. Quantity that was unavailable for this item */
                unavailable?: number;
                /** @description Number. The adjusted quantity for this item */
                available?: number;
                product?: components["schemas"]["ProductModel"];
              }[];
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              selection?: components["schemas"]["SelectionModel"];
              /** @description All available languages */
              languages?: components["schemas"]["LanguageModel"][];
              /** @description All available payment methods for current selection */
              paymentMethods?: components["schemas"]["PaymentMethodModel"][];
              paymentFields?: components["schemas"]["PaymentFieldsModel"];
              /** @description All available shipping methods for current selection */
              shippingMethods?: components["schemas"]["ShippingMethodModel"][];
              /** @description All shippable countries */
              countries?: components["schemas"]["CountryShippableModel"][];
              /** @description Optional. If the current session contains a logged in customer */
              loggedIn?: components["schemas"]["LoggedInModel"];
              /** @description Current location data for the session */
              location?: components["schemas"]["LocationModel"];
            };
          };
        };
        /** When item ID could not be added. */
        412: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                item?: string;
              };
            };
          };
        };
        /** When selection could not be created. */
        500: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                server?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The URL to the product added, so the item can be linked back to its origin */
            productUrl?: string;
            /** @description number, minimum 1. The category id of the added product, so the item can be linked back to its origin */
            category?: number;
            /** @description string. Requires shared secret. Comment that will end up on the order line */
            comment?: string;
            /** @description The ID of subscription plan */
            subscriptionPlan?: string;
          };
        };
      };
    };
  };
  "/languages": {
    /** List of available languages */
    get: {
      parameters: {};
      responses: {
        /** Fetching all available languages. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /** @description List of available languages */
              languages?: components["schemas"]["LanguageModel"][];
            };
          };
        };
      };
    };
  };
  "/languages/{language}": {
    /** Change language for the current session */
    put: {
      parameters: {
        path: {
          /** Language ID */
          language: string;
        };
      };
      responses: {
        /** Modify the language for the current session. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When language was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                language?: string;
              };
            };
          };
        };
      };
    };
  };
  "/lines/{line}": {
    /** Increase quantity of an item in the current selection using the line ID */
    post: {
      parameters: {
        path: {
          /** Unique id for the selection item */
          line: string;
        };
      };
      responses: {
        /** Adding quantity to a line ID in the selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When line ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                line?: string;
              };
            };
          };
        };
        /** Invalid input */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** If any products are unavailable */
        410: {
          content: {
            "application/json": {
              errors?: {
                stock?: string;
              };
              unavailable?: {
                /** @description Item ID */
                item?: string;
                /** @description Number. The original quantity before stock adjustment */
                originalQuantity?: number;
                /** @description Number. Quantity that was unavailable for this item */
                unavailable?: number;
                /** @description Number. The adjusted quantity for this item */
                available?: number;
                product?: components["schemas"]["ProductModel"];
              }[];
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              selection?: components["schemas"]["SelectionModel"];
              /** @description All available languages */
              languages?: components["schemas"]["LanguageModel"][];
              /** @description All available payment methods for current selection */
              paymentMethods?: components["schemas"]["PaymentMethodModel"][];
              paymentFields?: components["schemas"]["PaymentFieldsModel"];
              /** @description All available shipping methods for current selection */
              shippingMethods?: components["schemas"]["ShippingMethodModel"][];
              /** @description All shippable countries */
              countries?: components["schemas"]["CountryShippableModel"][];
              /** @description Optional. If the current session contains a logged in customer */
              loggedIn?: components["schemas"]["LoggedInModel"];
              /** @description Current location data for the session */
              location?: components["schemas"]["LocationModel"];
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description number, minimum 1. defaults to 1 */
            quantity?: number;
          };
        };
      };
    };
    /** Reduce quantity of an item in the current selection using the line ID */
    delete: {
      parameters: {
        path: {
          /** Unique id for the selection item */
          line: string;
        };
      };
      responses: {
        /** Removing a line ID from the selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When line ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                line?: string;
              };
            };
          };
        };
        /** Invalid input */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description number, minimum 1. Without quantity, the whole line is removed */
            quantity?: number;
          };
        };
      };
    };
  };
  "/lines/{line}/quantity/{quantity}": {
    /** Set specific quantity of an item in the current selection using the line ID */
    put: {
      parameters: {
        path: {
          /** Unique id for the selection item */
          line: string;
          /** number, minimum 0 */
          quantity: string;
        };
      };
      responses: {
        /** Setting quantity to a line ID in the selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When line ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                line?: string;
              };
            };
          };
        };
        /** Invalid input */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** If any products are unavailable */
        410: {
          content: {
            "application/json": {
              errors?: {
                stock?: string;
              };
              unavailable?: {
                /** @description Item ID */
                item?: string;
                /** @description Number. The original quantity before stock adjustment */
                originalQuantity?: number;
                /** @description Number. Quantity that was unavailable for this item */
                unavailable?: number;
                /** @description Number. The adjusted quantity for this item */
                available?: number;
                product?: components["schemas"]["ProductModel"];
              }[];
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              selection?: components["schemas"]["SelectionModel"];
              /** @description All available languages */
              languages?: components["schemas"]["LanguageModel"][];
              /** @description All available payment methods for current selection */
              paymentMethods?: components["schemas"]["PaymentMethodModel"][];
              paymentFields?: components["schemas"]["PaymentFieldsModel"];
              /** @description All available shipping methods for current selection */
              shippingMethods?: components["schemas"]["ShippingMethodModel"][];
              /** @description All shippable countries */
              countries?: components["schemas"]["CountryShippableModel"][];
              /** @description Optional. If the current session contains a logged in customer */
              loggedIn?: components["schemas"]["LoggedInModel"];
              /** @description Current location data for the session */
              location?: components["schemas"]["LocationModel"];
            };
          };
        };
      };
    };
    /** Increase quantity of an item in the current selection using the line ID */
    post: {
      parameters: {
        path: {
          /** Unique id for the selection item */
          line: string;
          /** number, minimum 1. */
          quantity: string;
        };
      };
      responses: {
        /** Adding quantity to a line ID in the selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When line ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                line?: string;
              };
            };
          };
        };
        /** Invalid input */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** If any products are unavailable */
        410: {
          content: {
            "application/json": {
              errors?: {
                stock?: string;
              };
              unavailable?: {
                /** @description Item ID */
                item?: string;
                /** @description Number. The original quantity before stock adjustment */
                originalQuantity?: number;
                /** @description Number. Quantity that was unavailable for this item */
                unavailable?: number;
                /** @description Number. The adjusted quantity for this item */
                available?: number;
                product?: components["schemas"]["ProductModel"];
              }[];
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              selection?: components["schemas"]["SelectionModel"];
              /** @description All available languages */
              languages?: components["schemas"]["LanguageModel"][];
              /** @description All available payment methods for current selection */
              paymentMethods?: components["schemas"]["PaymentMethodModel"][];
              paymentFields?: components["schemas"]["PaymentFieldsModel"];
              /** @description All available shipping methods for current selection */
              shippingMethods?: components["schemas"]["ShippingMethodModel"][];
              /** @description All shippable countries */
              countries?: components["schemas"]["CountryShippableModel"][];
              /** @description Optional. If the current session contains a logged in customer */
              loggedIn?: components["schemas"]["LoggedInModel"];
              /** @description Current location data for the session */
              location?: components["schemas"]["LocationModel"];
            };
          };
        };
      };
    };
    /** Reduce quantity of an item in the current selection using the line ID */
    delete: {
      parameters: {
        path: {
          /** Unique id for the selection item */
          line: string;
          /** number, minimum 1. */
          quantity: string;
        };
      };
      responses: {
        /** Removing a line ID from the selection */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When line ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                line?: string;
              };
            };
          };
        };
        /** Invalid input */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
  };
  "/lines/{line}/subscription-plan": {
    /** Remove items's subscription plan. */
    delete: {
      parameters: {
        path: {
          /** Unique id for the selection item */
          line: string;
        };
      };
      responses: {
        /** Removing subscription-plan from a line */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When line ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                line?: string;
              };
            };
          };
        };
        /** Invalid input */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
  };
  "/lines/{line}/subscription-plan/{subscriptionPlan}": {
    /** Update items's subscription plan. */
    put: {
      parameters: {
        path: {
          /** Unique id for the selection item */
          line: string;
          /** The ID of subscription plan */
          subscriptionPlan: string;
        };
      };
      responses: {
        /** When item ID is not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                item?: string;
              };
            };
          };
        };
        /** When input value is invalid. */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
  };
  "/login/{email}": {
    /** Sign in as the customer in the current session */
    post: {
      parameters: {
        path: {
          /** E-mail address */
          email: string;
        };
      };
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            password: string;
          };
        };
      };
    };
  };
  "/logout": {
    /**
     * Sign out from the customer in the current session
     *
     * Access Right: logged in users
     */
    post: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
  };
  "/markets": {
    /**
     * List of available markets. Requires shared secret
     *
     * Access Right: required shared secret
     */
    get: {
      parameters: {};
      responses: {
        /** Fetching all available markets. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              markets?: {
                /** @description Market id */
                market?: string;
                /** @description Name of market */
                name?: string;
                /** @description If the market is the default fallback one for the store */
                default?: boolean;
              }[];
            };
          };
        };
        /** Wrong shared secret. */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                accessRight?: string;
              };
            };
          };
        };
      };
    };
  };
  "/newsletter-subscription": {
    /** Subscribe to newsletter for the email address provided */
    post: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description E-mail address */
            email: string;
            email_field?: string;
            /** @description Product ID. Product id, used to sign up for back in stock emails on product level. */
            product?: string;
            /** @description Product Item ID. Item id, used to sign up for back in stock emails on size level. */
            item?: string;
            /** @description Country ISO 3166-1 alpha-2, for example SE */
            country?: string;
            /** @description Language ID */
            language?: string;
            /** @description female, male or nothing */
            gender?: string;
          };
        };
      };
    };
  };
  "/newsletter-subscription/{email}": {
    /** Subscribe to newsletter for the email address provided */
    post: {
      parameters: {
        path: {
          /** E-mail address */
          email: string;
        };
      };
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            email_field?: string;
            /** @description Product ID. Product id, used to sign up for back in stock emails on product level. */
            product?: string;
            /** @description Product Item ID. Item id, used to sign up for back in stock emails on size level. */
            item?: string;
            /** @description Country ISO 3166-1 alpha-2, for example SE */
            country?: string;
            /** @description Language ID */
            language?: string;
            /** @description female, male or nothing */
            gender?: string;
          };
        };
      };
    };
  };
  "/orders": {
    /**
     * Get previous orders for the currently logged in customer
     *
     * Access Right: logged in users
     */
    post: {
      parameters: {};
      responses: {
        /** Fetching previous orders from the currently logged in customer. */
        200: {
          content: {
            "application/json": components["schemas"]["OrdersResponse"];
          };
        };
        /** Current session does not contain a logged in customer. */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                accessRight?: string;
              };
            };
          };
        };
        /** Sending invalid parameters. */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description integer, minimum 0. from=0 is from the first order */
            from?: number;
            /** @description integer, minimum 1. Default lists all */
            size?: number;
          };
        };
      };
    };
  };
  "/password": {
    /**
     * Change the login password
     *
     * Access Right: logged in users
     */
    put: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            password: string;
            newPassword: string;
          };
        };
      };
    };
  };
  "/password-reset": {
    /**
     * Reset password using the link from the password reset email. Will automatically
     *          login the customer if the password reset was successful
     */
    post: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Get variable from the password reset link */
            i: string;
            /** @description Get variable from the password reset link */
            id: string;
            newPassword: string;
          };
        };
      };
    };
  };
  "/password-reset-email/{email}": {
    /** Send a password reset email to the email address registered */
    post: {
      parameters: {
        path: {
          /** e-mail address of customer */
          email: string;
        };
      };
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description The password reset link will
             *             be the domain from a Centra setting, this linkUri, then two get variables so if linkUri is
             *             "hello/world" the link could be https://example.com/hello/world?i=123&id=567
             */
            linkUri?: string;
          };
        };
      };
    };
  };
  "/payment": {
    /** Initiate the payment process for the current selection */
    post: {
      parameters: {};
      responses: {
        /** Payment method action response */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /**
               * @description Possible values: 'form', 'redirect', 'javascript'. Type of payment action based on payment method
               * @enum {string}
               */
              action?: "form" | "redirect" | "javascript";
              /**
               * @description Optional. When action=form this contains the type of payment method
               *                         plugin that is returned, to be able to identify what needs to be done with the response
               *                         <br /><br />Ex: `adyen-checkout`, `formFields` now contains the `adyenSession` value if you want
               *                         to initiate it differently to the default inside `formHtml`
               *                         <br /><br />Ex: `stripe-checkout`, `formFields` now contains
               *                         `sessionId`, `publishableKey` and `externalScript`
               *                         if you want to initiate the Stripe Checkout differently from the default way in `formHtml`
               */
              formType?: string;
              /**
               * @description Optional. If action=form,
               *                             this field contains the HTML including scripts that will automatically initiate
               *                             finalization of the payment. It could either make a form that submits data, or an inline
               *                             HTML for launching a checkout from a payment provider
               */
              formHtml?: string;
              /**
               * @description Optional. If action=javascript,
               *                             this field contains the JavaScript that should be evaluated to continue to payment process.
               */
              code?: string;
              /**
               * @description Optional. If action=form,
               *                             list of fields to submit to formUrl as a POST-request, or the
               *                             variables needed to initiate the payment method yourself
               */
              formFields?: { [key: string]: components["schemas"]["AnyValue"] };
              /** @description Optional. If action=form, an URL to POST all formFields to */
              formUrl?: string;
              /**
               * @description Optional. If action=redirect. The URL to redirect the customer to
               *                         for finalization of the payment
               */
              url?: string;
            };
          };
        };
        /** Order was completed directly */
        201: {
          content: {
            "application/json": components["schemas"]["OrderCreatedDirectlyResponse"];
          };
        };
        /** Invalid fields */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
              messages?: string[];
            };
          };
        };
        /** If any products are unavailable */
        410: {
          content: {
            "application/json": {
              errors?: {
                stock?: string;
              };
              unavailable?: {
                /** @description Item ID */
                item?: string;
                /** @description Number. The original quantity before stock adjustment */
                originalQuantity?: number;
                /** @description Number. Quantity that was unavailable for this item */
                unavailable?: number;
                /** @description Number. The adjusted quantity for this item */
                available?: number;
                product?: components["schemas"]["ProductModel"];
              }[];
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              selection?: components["schemas"]["SelectionModel"];
              /** @description All available languages */
              languages?: components["schemas"]["LanguageModel"][];
              /** @description All available payment methods for current selection */
              paymentMethods?: components["schemas"]["PaymentMethodModel"][];
              paymentFields?: components["schemas"]["PaymentFieldsModel"];
              /** @description All available shipping methods for current selection */
              shippingMethods?: components["schemas"]["ShippingMethodModel"][];
              /** @description All shippable countries */
              countries?: components["schemas"]["CountryShippableModel"][];
              /** @description Optional. If the current session contains a logged in customer */
              loggedIn?: components["schemas"]["LoggedInModel"];
              /** @description Current location data for the session */
              location?: components["schemas"]["LocationModel"];
            };
          };
        };
        /** No items in the current selection */
        412: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                selection?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Required unless it has been set previously for the selection */
            paymentMethod?: string;
            /**
             * @description Each payment plugin can require specific parameters to be sent. These parameters should be
             *                         sent inside this property
             */
            paymentMethodSpecificFields?: {
              [key: string]: components["schemas"]["AnyValue"];
            };
            /**
             * @description Used for payment buttons,
             *                         only initiate payment without selecting the payment method as current method. It will still
             *                         go through stock check, but it will not flip the current payment method of the selection.
             *                         Will allow plugins that supports the option to be initiated
             *                         without providing address information.
             */
            paymentInitiateOnly?: boolean;
            /** @description URL to redirect the customer to for validating the payment using POST /payment-result */
            paymentReturnPage?: string;
            /** @description URL to redirect the customer to if payment fails */
            paymentFailedPage?: string;
            /** @description `window.origin` where the checkout is located. Used for more modern payment checkout methods where the current origin of the checkout needs to be validated properly. */
            paymentCheckoutOrigin?: string;
            /** @description If not provided, the previously selected shipping method will be used */
            shippingMethod?: string;
            /**
             * @description boolean, must be true. You must have the customer accept the terms and conditions,
             *                         to make sure this is in the checkout, this needs to be sent to us as `true`
             */
            termsAndConditions?: boolean;
            /** @description Optional consents the customer is consenting to */
            consents?: {
              /** @description Consent key/type */
              key: string;
              /** @description Did the customer consent to this? */
              consented: boolean;
              /** @description Short name describing the consent */
              name?: string;
              /** @description Consent description */
              text?: string;
              /** @description Which version of the consent is this */
              version?: string;
              /** @description Which language does this consent use */
              language?: string;
            }[];
            /** @description Billing address, used also as shipping address if there is no shippingAddress provided */
            address?: {
              /** @description E-mail address */
              email?: string;
              company?: string;
              firstName?: string;
              lastName?: string;
              address1?: string;
              address2?: string;
              zipCode?: string;
              city?: string;
              /** @description Country ISO 3166-1 alpha-2, for example SE */
              country?: string;
              /**
               * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
               *         When used as input, the correct description of the state will also be allowed.
               */
              state?: string;
              phoneNumber?: string;
              /** @description Personal identification number, required by some payment methods */
              identityNumber?: string;
              /** @description Required if the selection was previously set as vatExempt=true */
              vatNumber?: string;
              /** @description Subscribe the address.email to the newsletter */
              newsletter?: boolean;
            };
            shippingAddress?: {
              /** @description E-mail address. If this is blank, the address.email is used */
              email?: string;
              company?: string;
              firstName?: string;
              lastName?: string;
              address1?: string;
              address2?: string;
              zipCode?: string;
              city?: string;
              phoneNumber?: string;
              /** @description Country ISO 3166-1 alpha-2, for example SE */
              country?: string;
              /**
               * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
               *         When used as input, the correct description of the state will also be allowed.
               */
              state?: string;
            };
            /** @description If an affiliate was used, send the affiliate ID from the cookie here */
            affiliate?: string;
            /** @description Values are passed to installed plugins that supports it */
            additionalFields?: {
              [key: string]: components["schemas"]["AnyValue"];
            };
            /** @description This could be used to let the customer leave special instructions */
            additionalNotes?: string;
            /** @description Fields to use if there is a customer club integration enabled */
            customerClubFields?: {
              [key: string]: components["schemas"]["AnyValue"];
            };
          };
        };
      };
    };
  };
  "/payment-fields": {
    /**
     * Partially updating the selection without processing to the payment step.
     *         Supports cart abandonment by providing plugins with the current selection combined with the filled in e-mail
     */
    put: {
      parameters: {};
      responses: {
        /** Modifying payment fields during checkout, without going to payment method */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** Unknown fields */
        400: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Partial or full billing and shipping address */
            address?: {
              /** @description Allows invalid email addresses, since it could be partially written in the checkout step */
              email?: string;
              company?: string;
              firstName?: string;
              lastName?: string;
              phoneNumber?: string;
              address1?: string;
              address2?: string;
              zipCode?: string;
              city?: string;
              /** @description Country ISO 3166-1 alpha-2, for example SE */
              country?: string;
              /** @description Required for some countries */
              state?: string;
              newsletter?: boolean;
            };
            /** @description Partial or full shipping address */
            shippingAddress?: {
              /** @description Allows invalid email addresses, since it could still partially written in the checkout step */
              email?: string;
              company?: string;
              firstName?: string;
              lastName?: string;
              phoneNumber?: string;
              address1?: string;
              address2?: string;
              zipCode?: string;
              city?: string;
              /** @description Country ISO 3166-1 alpha-2, for example SE */
              country?: string;
              /** @description Required for some countries */
              state?: string;
            };
            /** @description Language. Modify the language of the selection */
            language?: string;
            /** @description URL to redirect the customer to for validating the payment using POST /payment-result */
            paymentReturnPage?: string;
            /** @description URL to redirect the customer to if payment fails */
            paymentFailedPage?: string;
            /** @description Values are passed to installed plugins that supports it */
            additionalFields?: {
              [key: string]: components["schemas"]["AnyValue"];
            };
            /** @description This could be used to let the customer leave special instructions */
            additionalNotes?: string;
            /** @description Default `true`. Used to control if we should trigger a cart abandonment email */
            cartAbandonmentEmail?: boolean;
          };
        };
      };
    };
  };
  "/payment-methods/{paymentMethod}": {
    /** Change payment method for the current selection. */
    put: {
      parameters: {
        path: {
          /** string */
          paymentMethod: string;
        };
      };
      responses: {
        /** Modify the payment method for the current selection. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When payment method was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If payment method was not found */
                paymentMethod?: string;
              };
            };
          };
        };
      };
    };
  };
  "/payment-result": {
    /**
     * Send all variables received to paymentReturnPage
     *         to verify if the order was created successfully or not
     */
    post: {
      parameters: {};
      responses: {
        /** Order was successfully created */
        201: {
          content: {
            "application/json": components["schemas"]["OrderCreatedResponse"];
          };
        };
        /** When no selection/payment method/customer was found from the current session */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                selection?: string;
              };
            };
          };
        };
        /** Payment method error */
        412: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
              messages?: string[];
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description Every query string parameter combined with
             *                             POST-parameters receieved to the paymentReturnPage.
             *                             All of these are needed to validate if the
             *                             payment was successful or not
             */
            paymentMethodFields?: {
              [key: string]: components["schemas"]["AnyValue"];
            };
          };
        };
      };
    };
  };
  "/pricelists": {
    /**
     * List of available pricelists. Requires shared secret
     *
     * Access Right: required shared secret
     */
    get: {
      parameters: {};
      responses: {
        /** Fetching all available pricelists. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              pricelists?: {
                /** @description Pricelist id */
                pricelist?: string;
                /** @description Name of pricelist */
                name?: string;
                /** @description If the pricelist is the default fallback one for the store */
                default?: boolean;
                currency?: components["schemas"]["CurrencyModel"];
              }[];
            };
          };
        };
        /** Wrong shared secret. */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                accessRight?: string;
              };
            };
          };
        };
      };
    };
  };
  "/products": {
    /**
     * Product list, supports filtering based on criteria,
     *         returns filter capabilities for additional filtration
     */
    post: {
      parameters: {};
      responses: {
        /** Fetching all products. */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              products?:
                | components["schemas"]["ProductModel"]
                | components["schemas"]["ProductAllModel"];
              /** @description Number. Total amount of products filtered, regardless of value of `limit`. */
              productCount?: number;
              /**
               * @description If Checkout plugin settings has enabled filters, each filter that
               *                             can be applied to the current filtration
               */
              filter?: {
                /** @description Name for this filter method */
                field?: string;
                /** @description Each different value that can be filtered on for this filter type */
                values?: {
                  /** @description The value that should be used for the filter search */
                  value?: string;
                  /**
                   * @description Number. Items matching this filter option,
                   *                                             combined with all filter methods applied
                   */
                  count?: number;
                  /**
                   * @description Number. Items matching this filter option,
                   *                                             with all other filter methods included except the filter method it belongs to
                   */
                  filterCount?: number;
                  /**
                   * @description Number. Items matching this filter option,
                   *                                             with all filter methods excluded
                   */
                  totalCount?: number;
                  /** @description Different data depending on what field we can filter on */
                  data?:
                    | components["schemas"]["CollectionModel"]
                    | components["schemas"]["CategoryModel"]
                    | components["schemas"]["BrandModel"]
                    | string
                    | { [key: string]: components["schemas"]["AnyValue"] };
                }[];
              }[];
            };
          };
        };
        /** Fetching products using pricelist/market without shared secret */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Integer. Skip the first number of products, useful together with `limit` */
            skipFirst?: number;
            /** @description Integer. Return no more than this amount of products */
            limit?: number;
            /** @description Category ID or array of Category IDs. Filter to products in these categories, including subcategories */
            categories?: string;
            /** @description Collection ID or array of Category IDs. Filter to products only in these collections */
            collections?: string;
            /** @description Limit to products with specific item names (usually sizes) */
            "items.name"?: string[];
            /** @description Centra Product ID */
            centraProduct?: string;
            /** @description Free text search */
            search?: string;
            /**
             * @description Possible values: 'name', 'brandName', 'collectionName', 'sku', 'excerpt', 'description', 'variantName', 'items.sku', 'categoryName', 'fuzzy:name', 'fuzzy:variantName'. Specify what fields to free text search. When not provided,
             *                 the default selection will be used. `fuzzy:` mean it will allow certain differences between the search string and the result
             * @enum {array}
             */
            searchFields?:
              | "name"
              | "brandName"
              | "collectionName"
              | "sku"
              | "excerpt"
              | "description"
              | "variantName"
              | "items.sku"
              | "categoryName"
              | "fuzzy:name"
              | "fuzzy:variantName";
            /** @description `true` returns only products available now, `false` returns all */
            onlyAvailable?: boolean;
            /** @description `true` will only return products with showAsNew=true. `false` will return all products */
            showAsNew?: boolean;
            /** @description `true` will only return products with showAsOnSale=true. `false` will return all products */
            showAsOnSale?: boolean;
            products?: string[];
            /** @description To show measurement charts. Default is true */
            measurementCharts?: boolean;
            /** @description Default is false */
            relatedProducts?: boolean;
            uri?: {
              /** @description find this URI */
              uri: string;
              /**
               * @description Possible values: 'category', 'product'. Set if the URI is for a category or a product or both
               * @enum {array}
               */
              for: "category" | "product";
            };
            /** @description Language ID, if not provided the current session language is used */
            language?: string;
            /** @description Integer or string "all". Market ID. Requires shared secret */
            market?: string | number;
            /** @description Integer or string "all". Pricelist ID. Requires shared secret */
            pricelist?: string | number;
            sortOrder?: {
              /**
               * @description Possible values: 'uri', 'categoryItemSort', 'collectionUri', 'priceAsNumber', 'createdAt', 'modifiedAt'
               * @enum {string}
               */
              field:
                | "uri"
                | "categoryItemSort"
                | "collectionUri"
                | "priceAsNumber"
                | "createdAt"
                | "modifiedAt";
              /**
               * @description Possible values: 'asc', 'desc'. default is ascending, from lowest to highest
               * @enum {string}
               */
              order?: "asc" | "desc";
            }[];
          };
        };
      };
    };
  };
  "/products/{product}": {
    /** Details of one product */
    get: {
      parameters: {
        path: {
          /** string. Product Item ID */
          product: string;
        };
      };
      responses: {
        /** When product was fetched successfully */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              product?:
                | components["schemas"]["ProductModel"]
                | components["schemas"]["ProductAllModel"];
            };
          };
        };
        /** Fetching product using pricelist/market without shared secret */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Product could not be found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
    };
    /** Details of one product */
    post: {
      parameters: {
        path: {
          /** string. Product Item ID */
          product: string;
        };
      };
      responses: {
        /** When product was fetched successfully */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              product?:
                | components["schemas"]["ProductModel"]
                | components["schemas"]["ProductAllModel"];
            };
          };
        };
        /** Fetching product using pricelist/market without shared secret */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Product could not be found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Language ID, if not provided the current session language is used */
            language?: string;
            /** @description Integer or string "all". Market ID. Requires shared secret */
            market?: string | number;
            /** @description Integer or string "all". Pricelist ID. Requires shared secret */
            pricelist?: string | number;
          };
        };
      };
    };
  };
  "/receipt": {
    /** Receipt for the last order created in the current session */
    get: {
      parameters: {};
      responses: {
        /** Receipt from last order */
        200: {
          content: {
            "application/json": components["schemas"]["OrderCompleteResponse"];
          };
        };
        /** No completed order exists for this session */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                order?: string;
              };
            };
          };
        };
      };
    };
  };
  "/register": {
    /** Register customer. After registration is complete, the session is running as the logged in user */
    post: {
      parameters: {};
      responses: {
        /** Sorry, no response specification. */
        200: unknown;
        /**
         * Generic error response. The HTTP status code can be any 400 or 500 code.
         *                     The "errors" object contains one or more key value pairs to describe the error to developers.
         */
        400: {
          content: {
            "application/json": {
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description E-mail address */
            email: string;
            password: string;
            firstName: string;
            lastName: string;
            address1?: string;
            address2?: string;
            zipCode?: string;
            city?: string;
            state?: string;
            /** @description Country ISO 3166-1 alpha-2, for example SE */
            country?: string;
            phoneNumber?: string;
            /** @description When true customer is subscribed to newsletter after registration */
            newsletter?: boolean;
            /** @description Language ID. The language this customer uses */
            language?: string;
            /** @description anything */
            customerClubFields?: { [key: string]: unknown };
            /** @description Optional consents the customer is consenting to */
            consents?: {
              /** @description Consent key/type */
              key: string;
              /** @description Did the customer consent to this? */
              consented: boolean;
              /** @description Short name describing the consent */
              name?: string;
              /** @description Consent description */
              text?: string;
              /** @description Which version of the consent is this */
              version?: string;
              /** @description Which language does this consent use */
              language?: string;
            }[];
            /** @description Client specific attributes */
            customAttributes?: {
              /** @description anything */
              voyado_customer_id?: { [key: string]: unknown };
              /** @description anything */
              voyado_exported_historical_data?: { [key: string]: unknown };
            };
          };
        };
      };
    };
  };
  "/selection": {
    /** The current selection */
    get: {
      parameters: {};
      responses: {
        /** Get current selection. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
      };
    };
    /**
     * Update the market, pricelist, country or language of the current selection. Requires shared secret
     *
     * Access Right: required shared secret
     */
    put: {
      parameters: {};
      responses: {
        /** Modified selection response for the current session. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** Wrong shared secret. */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                accessRight?: string;
              };
            };
          };
        };
        /** When any of the modification entries were not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If country was not found */
                country?: string;
                /** @description If state was not found */
                state?: string;
                /** @description If language was not found */
                language?: string;
                /** @description If market was not found */
                market?: string;
                /** @description If pricelist was not found */
                pricelist?: string;
              };
            };
          };
        };
        /** When any of the modification entries were invalid. */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If country was invalid */
                country?: string;
                /** @description If state was invalid */
                state?: string;
                /** @description If language was invalid */
                language?: string;
                /** @description If market was invalid */
                market?: string;
                /** @description If pricelist was invalid */
                pricelist?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Country ISO 3166-1 alpha-2, for example SE */
            country?: string;
            /**
             * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
             *         When used as input, the correct description of the state will also be allowed.. for countries with states
             */
            state?: string;
            /** @description Language ID */
            language?: string;
            /** @description Market id */
            market?: string;
            /** @description Pricelist id */
            pricelist?: string;
          };
        };
      };
    };
  };
  "/selection/{selection}": {
    /** Attach open selection to the token, it now becomes the current selection for the session. */
    put: {
      parameters: {
        path: {
          /** Selection ID */
          selection: string;
        };
      };
      responses: {
        /** Changing selection for the current session. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When selection was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If selection was not found */
                selection?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Used to only return a token to be used for additional calls for this selection */
            tokenOnly?: boolean;
          };
        };
      };
    };
  };
  "/shipping-methods/{shippingMethod}": {
    /** Change shipping method for the current selection */
    put: {
      parameters: {
        path: {
          /** string */
          shippingMethod: string;
        };
      };
      responses: {
        /** Modified shipping method for the current selection. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When shipping method was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If shipping method was not found */
                shippingMethod?: string;
              };
            };
          };
        };
      };
    };
  };
  "/subscription/address": {
    /**
     * Change the contract address for the logged in customer
     *
     * Access Right: logged in users
     */
    put: {
      parameters: {};
      responses: {
        /** Update subscription address */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /** @description Integer */
              contract?: number;
              created?: string;
              updated?: string;
              /** @description Integer */
              originatingOrder?: number;
              shippingAddress?: {
                firstName?: string;
                lastName?: string;
                email?: string;
                phoneNumber?: string;
                address1?: string;
                address2?: string;
                zipCode?: string;
                city?: string;
                state?: string;
                country?: string;
              };
              subscriptionPayment?: {
                description?: string;
                status?: string;
                created?: string;
                updated?: string;
              };
            };
          };
        };
        /** not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The ID of a subscription contract */
            contract: string;
            firstName: string;
            lastName: string;
            address1: string;
            address2?: string;
            zipCode: string;
            city: string;
            phoneNumber: string;
            /** @description E-mail address */
            email: string;
          };
        };
      };
    };
  };
  "/subscription/interval": {
    /**
     * Change the interval for a subscription owned by the logged in customer
     *
     * Access Right: logged in users
     */
    put: {
      parameters: {};
      responses: {
        /** Update subscription interval */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /** @description Integer */
              subscription?: number;
              /** @description Integer */
              contract?: number;
              created?: string;
              updated?: string;
              status?: string;
              /** @description Deprecated. Use `subscriptionPlan` property instead. */
              interval?: {
                type?: string;
                /** @description Integer */
                value?: number;
              };
              subscriptionPlan?: {
                name?: string;
                /** @description Number. Number between 0 and 100 inclusive. */
                discountPercent?: number;
                /**
                 * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
                 * @enum {string}
                 */
                interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
                /**
                 * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
                 * @enum {string}
                 */
                intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
                /** @description Integer. Deprecated. Use `intervalValue` instead. */
                value?: number;
                /** @description Integer */
                intervalValue?: number;
              };
              nextScheduledOrder?: string;
              nextAttemptedOrder?: string;
              attentionFlags?: {
                paymentDeclined?: boolean;
                paymentRevoked?: boolean;
                outOfStock?: boolean;
              };
              item?: {
                item?: string;
                /** @description Integer */
                quantity?: number;
                size?: string;
                sku?: string;
                ean?: string;
                silkVariant?: string;
                silkProduct?: string;
                priceEach?: string;
                /** @description Number */
                priceEachAsNumber?: number;
                totalPrice?: string;
                /** @description Number */
                totalPriceAsNumber?: number;
                priceEachBeforeDiscount?: string;
                /** @description Number */
                priceEachBeforeDiscountAsNumber?: number;
                anyDiscount?: boolean;
                totalPriceBeforeDiscount?: string;
                /** @description Number */
                totalPriceBeforeDiscountAsNumber?: number;
                product?: components["schemas"]["SelectionProductModel"];
              };
            };
          };
        };
        /** not available */
        400: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The ID of a subscription */
            subscription: string;
            /** @description The ID of subscription plan */
            subscriptionPlan: string;
          };
        };
      };
    };
  };
  "/subscription/status": {
    /**
     * Update subscription status.
     *
     * Access Right: logged in users
     */
    put: {
      parameters: {};
      responses: {
        /** Update subscription status */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /** @description Integer */
              subscription?: number;
              /** @description Integer */
              contract?: number;
              created?: string;
              updated?: string;
              status?: string;
              /** @description Deprecated. Use `subscriptionPlan` property instead. */
              interval?: {
                type?: string;
                /** @description Integer */
                value?: number;
              };
              subscriptionPlan?: {
                name?: string;
                /** @description Number. Number between 0 and 100 inclusive. */
                discountPercent?: number;
                /**
                 * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
                 * @enum {string}
                 */
                interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
                /**
                 * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
                 * @enum {string}
                 */
                intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
                /** @description Integer. Deprecated. Use `intervalValue` instead. */
                value?: number;
                /** @description Integer */
                intervalValue?: number;
              };
              nextScheduledOrder?: string;
              nextAttemptedOrder?: string;
              attentionFlags?: {
                paymentDeclined?: boolean;
                paymentRevoked?: boolean;
                outOfStock?: boolean;
              };
              item?: {
                item?: string;
                /** @description Integer */
                quantity?: number;
                size?: string;
                sku?: string;
                ean?: string;
                silkVariant?: string;
                silkProduct?: string;
                priceEach?: string;
                /** @description Number */
                priceEachAsNumber?: number;
                totalPrice?: string;
                /** @description Number */
                totalPriceAsNumber?: number;
                priceEachBeforeDiscount?: string;
                /** @description Number */
                priceEachBeforeDiscountAsNumber?: number;
                anyDiscount?: boolean;
                totalPriceBeforeDiscount?: string;
                /** @description Number */
                totalPriceBeforeDiscountAsNumber?: number;
                product?: components["schemas"]["SelectionProductModel"];
              };
            };
          };
        };
        /** not found */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Wrong status */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The ID of a subscription */
            subscription: string;
            /** @description Subscription status. New subscription status */
            status: string;
          };
        };
      };
    };
  };
  "/uri": {
    /** Use Centra as a routing mechanism to receive category/product and CMS data based on request path/URI */
    post: {
      parameters: {};
      responses: {
        /** Fetching products/categories or CMS articles based on URI */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              /** @description Type found, can only match with the ones sent in `for` */
              found?: string;
              category?: components["schemas"]["CategoryModel"];
              /** @description Optional. If a category was found, all products in the category */
              products?: components["schemas"]["ProductModel"][];
              product?: components["schemas"]["ProductModel"];
              cmsArticle?: components["schemas"]["CmsArticleModel"];
            };
          };
        };
        /** Invalid request invalid parameters */
        400: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Searching using market/pricelist without shared secret */
        401: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** When no content was found based on `uri` and the options in `for` */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                uri?: string;
              };
            };
          };
        };
        /** Invalid request missing parameters */
        406: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: { [key: string]: string };
            };
          };
        };
        /** Asking for CMS articles without CMS module installed */
        503: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                cms?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            uri: string;
            /**
             * @description Possible values: 'category', 'product', 'cmsArticle'. An array of the types of data you support to receive
             * @enum {array}
             */
            for: "category" | "product" | "cmsArticle";
            /** @description Integer. For type `category`: skip the first number of products */
            skipFirst?: number;
            /** @description Integer. For type `category`: return no more than this number of products */
            limit?: number;
            /** @description Language ID, if not provided the current session language is used */
            language?: string;
            /** @description Integer or string "all". Market ID. Requires shared secret */
            market?: string | number;
            /** @description Integer or string "all". Pricelist ID. Requires shared secret */
            pricelist?: string | number;
          };
        };
      };
    };
  };
  "/vouchers": {
    /** Add voucher code to the current selection */
    post: {
      parameters: {};
      responses: {
        /** Added a voucher for the current selection. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /** When voucher was not found. */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If voucher was not found */
                voucher?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            voucher: string;
          };
        };
      };
    };
    /** Remove voucher code */
    delete: {
      parameters: {};
      responses: {
        /** Removed a voucher for the current selection. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /**
         * When voucher was provided but does not exist at all.
         *                 If the voucher existed but was not added to the selection it will still give a status 200 OK
         */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If voucher was not found */
                voucher?: string;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description If no voucher code is specified, all vouchers will be removed */
            voucher?: string;
          };
        };
      };
    };
  };
  "/vouchers/{voucher}": {
    /** Remove voucher code */
    delete: {
      parameters: {
        path: {
          /** string. If no voucher code is specified, all vouchers will be removed */
          voucher: string;
        };
      };
      responses: {
        /** Removed a voucher for the current selection. */
        200: {
          content: {
            "application/json": components["schemas"]["SelectionResponse"];
          };
        };
        /**
         * When voucher was provided but does not exist at all.
         *                 If the voucher existed but was not added to the selection it will still give a status 200 OK
         */
        404: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                /** @description If voucher was not found */
                voucher?: string;
              };
            };
          };
        };
      };
    };
  };
  "/warehouses": {
    /**
     * List of all warehouses enabled for visibility. Requires shared secret
     *
     * Access Right: required shared secret
     */
    get: {
      parameters: {};
      responses: {
        /** Fetching all published warehouses */
        200: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              warehouses?: components["schemas"]["WarehouseModel"][];
            };
          };
        };
        /** Wrong shared secret. */
        403: {
          content: {
            "application/json": {
              /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
              token?: string;
              errors?: {
                accessRight?: string;
              };
            };
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    /** @description Any value */
    AnyValue: unknown;
    /** @description Smaller category object compared to CategoryModel, used for products */
    CategoryForProductModel: {
      /** @description Category ID */
      category?: string;
      /** @description Each sub category name as an element. Root category first. */
      name?: string[];
      /** @description Integer. Sort order for the product in this category */
      sortOrder?: number;
      /** @description Full category URI */
      uri?: string;
    };
    /** @description Subscription Plan object */
    SubscriptionPlanModel: {
      name?: string;
      /** @description Number. Number between 0 and 100 inclusive. */
      discountPercent?: number;
      /**
       * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
       * @enum {string}
       */
      interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
      /**
       * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
       * @enum {string}
       */
      intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
      /** @description Integer. Deprecated. Use `intervalValue` instead. */
      value?: number;
      /** @description Integer */
      intervalValue?: number;
      /** @description Integer. Subscription Plan ID. Deprecated - use `subscriptionPlan` instead */
      id?: number;
      /**
       * @description Possible values: 'ACTIVE', 'INACTIVE', 'CANCELLED'
       * @enum {string}
       */
      status?: string;
      /** @description Integer. Subscription Plan ID. */
      subscriptionPlan?: number;
    };
    SelectionProductModel: {
      /** @description Product Display Item ID */
      product?: string;
      /** @description Product Display Name */
      name?: string;
      /** @description Product URI. Unique URI for the product */
      uri?: string;
      /** @description The specific variant SKU (Either only Product or a combination of Product+Variant) */
      sku?: string;
      /** @description Product SKU */
      productSku?: string;
      /** @description Brand ID */
      brand?: string;
      /** @description Brand name */
      brandName?: string;
      /** @description Brand URI. Unique URI for the brand */
      brandUri?: string;
      /** @description Collection ID */
      collection?: string;
      /** @description Collection name */
      collectionName?: string;
      /** @description Collection URI. Unique URI for the collection */
      collectionUri?: string;
      /** @description Variant Name */
      variantName?: string;
      /** @description Country ISO 3166-1 alpha-2, for example SE. Product Origin */
      countryOfOrigin?: string;
      /** @description Short description of the product */
      excerpt?: string;
      /** @description Short description of the product, formatted as HTML */
      excerptHtml?: string;
      /** @description Description of the product */
      description?: string;
      /** @description Description of the product, formatted as HTML */
      descriptionHtml?: string;
      /** @description Meta title for the product page */
      metaTitle?: string;
      /** @description Meta description for the product page */
      metaDescription?: string;
      /** @description Meta keywords for the product page */
      metaKeywords?: string;
      /** @description The stock unit for this product, default empty */
      stockUnit?: string;
      /** @description Category ID for the canonical category */
      category?: string;
      /** @description Category name for the canonical category, each sub category name as an element. Root category first. */
      categoryName?: string[];
      /** @description Date of creation */
      createdAt?: string;
      /** @description Date of modification */
      modifiedAt?: string;
      /** @description Category URI for the canonical category */
      categoryUri?: string;
      /** @description Product ID in Centra */
      centraProduct?: string;
      /** @description Variant ID in Centra */
      centraVariant?: string;
      /** @description Number. Default 1, minimum allowed quantity for purchase */
      itemQuantityMinimum?: number;
      /** @description Number. Default 1, allowed quantity multiple for purchase */
      itemQuantityMultipleOf?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price for the product */
      price?: string;
      /** @description number. Price value as a float, example: 14.11. Price for the product */
      priceAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price before discount */
      priceBeforeDiscount?: string;
      /** @description number. Price value as a float, example: 14.11. Price before discount */
      priceBeforeDiscountAsNumber?: number;
      /** @description Number. Percent of discount on this product's price */
      discountPercent?: number;
      /** @description If product should be marked with sale */
      showAsOnSale?: boolean;
      /** @description If product should be marked with new */
      showAsNew?: boolean;
      /** @description Size table to sort sizes properly, supports both X and Y axes */
      itemTable?: {
        /** @description Size table units */
        unit?: string;
        /** @description Each X-axis */
        x?: string[];
        /** @description Each Y-axis */
        y?: string[];
        /** @description The divider between X and Y */
        dividerSymbol?: string;
      };
      items?: {
        /** @description Item ID */
        item?: string;
        /** @description EAN for this item */
        ean?: string;
        /** @description Size ID */
        sizeId?: string;
        /** @description Integer. Position on X-axis of itemTable */
        itemTableX?: number;
        /** @description Integer. Position on Y-axis of itemTable */
        itemTableY?: number;
        /** @description Size description */
        name?: string;
        /** @description Product item SKU */
        sku?: string;
      }[];
      categories?: components["schemas"]["CategoryForProductModel"][];
      /** @description For each image size key, an array with URLs to the images for the product */
      media?: {
        "*imageKey*"?: string[];
      };
      mediaObjects?: {
        /** @description Media ID */
        media?: string;
        /** @description For each image size key, an array with URLs to the images for the product */
        sources?: {
          "*imageKey*"?: string[];
        };
        attributes?: { [key: string]: string };
      };
      /** @description If product is in preview mode or not */
      preview?: boolean;
      /** @description What type of relation type this product has. Default is `variant` */
      relation?: string | string | string;
      /**
       * @description Optional.
       *                 Custom attributes applied to this product and exposed in the Checkout plugin settings
       */
      "*customAttribute*"?: {
        [key: string]: components["schemas"]["AnyValue"];
      };
      /** @description Available subscription plans */
      subscriptionPlans?: components["schemas"]["SubscriptionPlanModel"][];
    };
    /** @description Bundle information object */
    BundleInfoModel: {
      /** @description Integer. bundle id */
      bundle?: number;
      /**
       * @description Possible values: 'fixed', 'flexible'
       * @enum {string}
       */
      type?: "fixed" | "flexible";
      /**
       * @description Possible values: 'static', 'dynamic'
       * @enum {string}
       */
      priceType?: "static" | "dynamic";
      /** @description Minimal sum of item prices inside the bundle when bought alone */
      priceOfItems?: string;
      /** @description Number. Minimal sum of item prices inside the bundle when bought alone */
      priceOfItemsAsNumber?: number;
      /** @description Currency formatted minimal price for this bundle */
      minPrice?: string;
      /** @description Number. Minimal price for this bundle */
      minPriceAsNumber?: number;
      /** @description Currency formatted maximal price for this bundle */
      maxPrice?: string;
      /** @description Number. Maximal price for this bundle */
      maxPriceAsNumber?: number;
    };
    /** @description Bundle object */
    BundleModel: {
      bundleInfo?: components["schemas"]["BundleInfoModel"];
      sections?: {
        /** @description Section ID */
        section?: string;
        /** @description Integer. Number of items for this section */
        quantity?: number;
        /** @description Integer. List of product ids in this section */
        products?: number[];
      }[];
    };
    SelectionItemModel: {
      /** @description Item ID */
      item?: string;
      /** @description URL from where the product was added */
      productUrl?: string;
      /** @description Category ID from where the product was added */
      category?: string;
      /** @description Size description */
      size?: string;
      /** @description Product item SKU */
      sku?: string;
      /** @description Product item EAN */
      ean?: string;
      /** @description Number. Quantity for this item */
      quantity?: number;
      /** @description Product item comment */
      comment?: string;
      /** @description Unique id for the selection item */
      line?: string;
      /** @description string. Formatted price with currency prefix/suffix. Price for each item */
      priceEach?: string;
      /** @description number. Price value as a float, example: 14.11. Price for each item */
      priceEachAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Total price for the total quantity of this item */
      totalPrice?: string;
      /** @description number. Price value as a float, example: 14.11. Total price for the total quantity of this item */
      totalPriceAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price for each item before any discount, original price */
      priceEachBeforeDiscount?: string;
      /** @description number. Price value as a float, example: 14.11. Price for each item before any discount, original price */
      priceEachBeforeDiscountAsNumber?: number;
      /** @description If any discount was applied to this item */
      anyDiscount?: boolean;
      /** @description Number. The included tax percentage in the price */
      taxPercent?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price for each item excluding tax */
      priceEachWithoutTax?: string;
      /** @description number. Price value as a float, example: 14.11. Price for each item excluding tax */
      priceEachWithoutTaxAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Total price for item */
      totalPriceBeforeDiscount?: string;
      /** @description number. Price value as a float, example: 14.11. Total price for item */
      totalPriceBeforeDiscountAsNumber?: number;
      product?: components["schemas"]["SelectionProductModel"];
      /** @description Contained items of the bundle, if this item is a bundle */
      bundle?: components["schemas"]["BundleModel"];
      /** @description Subscription Plan ID */
      subscriptionPlan?: components["schemas"]["SubscriptionPlanModel"];
    };
    SelectionBundleModel: {
      /** @description Item ID */
      item?: string;
      /** @description URL from where the product was added */
      productUrl?: string;
      /** @description Category ID from where the product was added */
      category?: string;
      /** @description Size description */
      size?: string;
      /** @description Product item SKU */
      sku?: string;
      /** @description Product item EAN */
      ean?: string;
      /** @description Number. Quantity for this item */
      quantity?: number;
      /** @description Product item comment */
      comment?: string;
      /** @description Unique id for the selection item */
      line?: string;
      /** @description string. Formatted price with currency prefix/suffix. Price for each item */
      priceEach?: string;
      /** @description number. Price value as a float, example: 14.11. Price for each item */
      priceEachAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Total price for the total quantity of this item */
      totalPrice?: string;
      /** @description number. Price value as a float, example: 14.11. Total price for the total quantity of this item */
      totalPriceAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price for each item before any discount, original price */
      priceEachBeforeDiscount?: string;
      /** @description number. Price value as a float, example: 14.11. Price for each item before any discount, original price */
      priceEachBeforeDiscountAsNumber?: number;
      /** @description If any discount was applied to this item */
      anyDiscount?: boolean;
      /** @description Number. The included tax percentage in the price */
      taxPercent?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price for each item excluding tax */
      priceEachWithoutTax?: string;
      /** @description number. Price value as a float, example: 14.11. Price for each item excluding tax */
      priceEachWithoutTaxAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Total price for item */
      totalPriceBeforeDiscount?: string;
      /** @description number. Price value as a float, example: 14.11. Total price for item */
      totalPriceBeforeDiscountAsNumber?: number;
      product?: components["schemas"]["SelectionProductModel"];
      /** @description Contained items of the bundle, if this item is a bundle */
      bundle?: components["schemas"]["BundleModel"];
      /** @description Subscription Plan ID */
      subscriptionPlan?: components["schemas"]["SubscriptionPlanModel"];
    };
    CurrencyModel: {
      /** @description Currency code (ISO 4217) */
      currency?: string;
      /** @description Name of currency */
      name?: string;
      /** @description Prefix used for rendering a price */
      prefix?: string;
      /** @description Suffix used for rendering a price */
      suffix?: string;
      /** @description String to separate integers from decimals, default "." */
      decimalPoint?: string;
      /** @description amount of decimals to be rendered */
      decimalDigits?: string;
      /** @description shortname for the currency */
      uri?: string;
    };
    /** @description Current selection */
    SelectionModel: {
      /** @description HTML needed to inject into the DOM to trigger affiliate tracking scripts */
      affiliateHtml?: string;
      /**
       * @description If order was a gift certificate purchase,
       *             this contains the gift message
       */
      giftMessage?: string;
      /** @description Language ID. Selected language for the current selection */
      language?: string;
      /** @description Currency code (ISO 4217). Currency for the selection */
      currency?: string;
      /** @description Selected payment method id */
      paymentMethod?: string;
      /** @description Selected payment method name */
      paymentMethodName?: string;
      /** @description Selected shipping method id */
      shippingMethod?: string;
      /** @description Selected shipping method name */
      shippingMethodName?: string;
      /**
       * @description Optional. Contains properties added by installed plugins
       *                 <br /><br />Ex: `paymentHTML`, string, optional.
       *                 Current checkout script for current order. Used for KCO/Klarna Checkout
       *                 <br /><br />Ex: `klarnaReplaceSnippet`, boolean, optional. If KCO should be reloaded or not
       *                 <br /><br />Ex: `shipwallet`, object, optional. Used for Ingrid widget
       *                 <br /><br />Ex: `shipwallet_reload`, bool, optional. Used for Ingrid widget
       */
      pluginFields?: { [key: string]: components["schemas"]["AnyValue"] };
      /**
       * @description Optional. Is added as soon as any installed plugin wants to load it.
       *                 Centra Checkout Script for supporting simple JavaScript hooks
       *                 in checkout process to make sure all payment checkout windows
       *                 are properly reloaded when selection changes
       */
      centraCheckoutScript?: string;
      items?: (Partial<components["schemas"]["SelectionItemModel"]> &
        Partial<components["schemas"]["SelectionBundleModel"]>)[];
      discounts?: {
        /** @description If any discount was applied to the order */
        anyDiscount?: boolean;
        /** @description string. Formatted price with currency prefix/suffix. Total discount amount applied to the order */
        discount?: string;
        /** @description number. Price value as a float, example: 14.11. Total discount amount applied to the order */
        discountAsNumber?: number;
        automaticDiscounts?: {
          /** @description If discount was applied automatically */
          automaticDiscount?: boolean;
          /** @description Name of this discount */
          name?: string;
          /** @description string. Formatted price with currency prefix/suffix. Amount reduced by this discount */
          priceOff?: string;
          /** @description number. Price value as a float, example: 14.11. Amount reduced by this discount */
          priceOffAsNumber?: number;
        }[];
        vouchers?: {
          /** @description Voucher code */
          voucher?: string;
          /**
           * @description Possible values: 'code', 'uri', 'other'. Type of voucher added
           * @enum {string}
           */
          type?: "code" | "uri" | "other";
          /** @description Description of voucher */
          description?: string;
          /** @description string. Formatted price with currency prefix/suffix. Amount reduced by this voucher */
          priceOff?: string;
          /** @description number. Price value as a float, example: 14.11. Amount reduced by this voucher */
          priceOffAsNumber?: number;
        }[];
      };
      totals?: {
        /** @description string. Formatted price with currency prefix/suffix. Total price for all items */
        itemsTotalPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Total price for all items */
        itemsTotalPriceAsNumber?: number;
        /** @description string or false. Total discount. false if none */
        totalDiscountPrice?: string | boolean;
        /** @description number or false. Total discount as number. false if none */
        totalDiscountPriceAsNumber?: number | boolean;
        /** @description string. Formatted price with currency prefix/suffix. Shipping cost */
        shippingPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Shipping cost */
        shippingPriceAsNumber?: number;
        /** @description If handling cost was added to shipping cost */
        handlingCostAddedToShippingPrice?: boolean;
        /** @description Number. Total quantity in selection */
        totalQuantity?: number;
        /** @description string or false. Tax deducted from selection, if applicable. default false */
        taxDeducted?: string | boolean;
        /** @description number or false. Tax deducted from selection, if applicable. default false */
        taxDeductedAsNumber?: number | boolean;
        /** @description number or false. Tax added on selection, if applicable else false */
        taxAdded?: number | boolean;
        /** @description string or false. Tax added from selection, if applicable else false */
        taxAddedAsNumber?: string | boolean;
        /** @description Number. Percentage of tax on the selection */
        taxPercent?: number;
        /** @description string. Formatted price with currency prefix/suffix. Grand total for selection */
        grandTotalPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Grand total for selection */
        grandTotalPriceAsNumber?: number;
        /** @description string. Formatted price with currency prefix/suffix. Grand total tax for selection */
        grandTotalPriceTax?: string;
        /** @description number. Price value as a float, example: 14.11. Grand total tax for selection */
        grandTotalPriceTaxAsNumber?: number;
      };
      /** @description If selection qualifies for VAT exemption */
      vatExempt?: boolean;
      /** @description Additional notes defined on the order */
      additionalNotes?: string;
      address?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        zipCode?: string;
        city?: string;
        state?: string;
        /** @description Country ISO 3166-1 alpha-2, for example SE */
        country?: string;
        countryName?: string;
        phoneNumber?: string;
        vatNumber?: string;
      };
      shippingAddress?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        zipCode?: string;
        city?: string;
        state?: string;
        /** @description Country ISO 3166-1 alpha-2, for example SE */
        country?: string;
        countryName?: string;
        phoneNumber?: string;
      };
      currencyFormat?: components["schemas"]["CurrencyModel"];
    };
    LanguageModel: {
      /** @description Language ID */
      language?: string;
      /** @description Name of language */
      name?: string;
      /** @description If the language is the default fallback one for the store */
      default?: boolean;
    };
    PaymentMethodModel: {
      /** @description Payment Method ID */
      paymentMethod?: string;
      /** @description Name of payment method */
      name?: string;
      clientSide?: {
        /** @description Optional URL to initiate this payment method on the checkout page. */
        externalScript?: string;
      };
      /** @description string. Formatted price with currency prefix/suffix. Additional cost when using this payment method */
      handlingCost?: string;
      /** @description number. Price value as a float, example: 14.11. Additional cost when using this payment method */
      handlingCostAsNumber?: number;
      /** @description If the address is fetched from the provider, this value will be `true` */
      providesCustomerAddressAfterPayment?: boolean;
      /**
       * @description This value defines the plugin used for the payment method, it can be used to trigger certain
       *                 logic in the checkout for certain plugins, such as `stripe_payment_intents` or `klarna_checkout`.
       */
      paymentMethodType?: string;
    };
    PaymentFieldModel: {
      /**
       * @description Possible values: 'string', 'boolean'. Type of input
       * @enum {string}
       */
      type?: "string" | "boolean";
      /** @description If input is visible or not */
      visible?: boolean;
      /** @description If input is required or not */
      required?: boolean;
    };
    /** @description All fields needed for completing checkout process */
    PaymentFieldsModel: {
      termsAndConditions?: components["schemas"]["PaymentFieldModel"];
      address?: {
        email?: components["schemas"]["PaymentFieldModel"];
        company?: components["schemas"]["PaymentFieldModel"];
        firstName?: components["schemas"]["PaymentFieldModel"];
        lastName?: components["schemas"]["PaymentFieldModel"];
        address1?: components["schemas"]["PaymentFieldModel"];
        address2?: components["schemas"]["PaymentFieldModel"];
        zipCode?: components["schemas"]["PaymentFieldModel"];
        city?: components["schemas"]["PaymentFieldModel"];
        state?: components["schemas"]["PaymentFieldModel"];
        country?: components["schemas"]["PaymentFieldModel"];
        phoneNumber?: components["schemas"]["PaymentFieldModel"];
        identityNumber?: components["schemas"]["PaymentFieldModel"];
        vatNumber?: components["schemas"]["PaymentFieldModel"];
        houseNumber?: components["schemas"]["PaymentFieldModel"];
        houseExtension?: components["schemas"]["PaymentFieldModel"];
        newsletter?: components["schemas"]["PaymentFieldModel"];
      };
      shippingAddress?: {
        email?: components["schemas"]["PaymentFieldModel"];
        company?: components["schemas"]["PaymentFieldModel"];
        firstName?: components["schemas"]["PaymentFieldModel"];
        lastName?: components["schemas"]["PaymentFieldModel"];
        address1?: components["schemas"]["PaymentFieldModel"];
        address2?: components["schemas"]["PaymentFieldModel"];
        zipCode?: components["schemas"]["PaymentFieldModel"];
        city?: components["schemas"]["PaymentFieldModel"];
        state?: components["schemas"]["PaymentFieldModel"];
        country?: components["schemas"]["PaymentFieldModel"];
        phoneNumber?: components["schemas"]["PaymentFieldModel"];
        houseNumber?: components["schemas"]["PaymentFieldModel"];
        houseExtension?: components["schemas"]["PaymentFieldModel"];
      };
    };
    ShippingMethodModel: {
      /** @description Shipping Method ID */
      shippingMethod?: string;
      /** @description Name of shipping method */
      name?: string;
      /** @description string. Formatted price with currency prefix/suffix. Additional cost when using this shipping method */
      price?: string;
      /** @description number. Price value as a float, example: 14.11. Additional cost when using this shipping method */
      priceAsNumber?: number;
    };
    CountryShippableModel: {
      /** @description Country ISO 3166-1 alpha-2, for example SE */
      country?: string;
      /** @description Name of country */
      name?: string;
      /** @description If country is in eu or not */
      eu?: boolean;
      /** @description Language ID */
      language?: string;
      /** @description Currency code (ISO 4217). Preferred currency for this country */
      currency?: string;
      /** @description This property only shows up if the country actually has states. */
      states?: {
        /**
         * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
         *         When used as input, the correct description of the state will also be allowed.
         */
        state?: string;
        /** @description Name of state */
        name?: string;
      }[];
    };
    LoggedInModel: {
      /** @description E-mail address. Current logged in customer's email address */
      email?: string;
      /** @description First name of customer */
      firstName?: string;
      /** @description Last name of customer */
      lastName?: string;
      /** @description Optional. Gender of the customer */
      gender?: string;
      address1?: string;
      address2?: string;
      zipCode?: string;
      city?: string;
      /**
       * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
       *         When used as input, the correct description of the state will also be allowed.
       */
      state?: string;
      /** @description Country ISO 3166-1 alpha-2, for example SE */
      country?: string;
      phoneNumber?: string;
      /** @description Language ID. Language set for this customer. Could be null */
      language?: string;
      /** @description If customer has registered to newsletter subscription */
      newsletter?: boolean;
      /**
       * @description Optional.
       *             Custom attributes applied to this customer
       */
      "*customAttribute*"?: {
        [key: string]: components["schemas"]["AnyValue"];
      };
    };
    LocationModel: {
      /** @description Country ISO 3166-1 alpha-2, for example SE */
      country?: string;
      /** @description Name of current country */
      name?: string;
      /**
       * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
       *         When used as input, the correct description of the state will also be allowed.. Current country state
       */
      state?: string;
      /** @description Name of current country state */
      stateName?: string;
      /** @description If current country is in EU */
      eu?: boolean;
      /** @description If current country is shippable */
      shipTo?: boolean;
      /** @description Current language for the session */
      language?: components["schemas"]["LanguageModel"];
      /** @description Integer. Current market ID for the session */
      market?: number;
      /** @description Integer. Current pricelist ID for the session */
      pricelist?: number;
    };
    SelectionResponse: {
      /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
      token?: string;
      selection?: components["schemas"]["SelectionModel"];
      /** @description All available languages */
      languages?: components["schemas"]["LanguageModel"][];
      /** @description All available payment methods for current selection */
      paymentMethods?: components["schemas"]["PaymentMethodModel"][];
      paymentFields?: components["schemas"]["PaymentFieldsModel"];
      /** @description All available shipping methods for current selection */
      shippingMethods?: components["schemas"]["ShippingMethodModel"][];
      /** @description All shippable countries */
      countries?: components["schemas"]["CountryShippableModel"][];
      /** @description Optional. If the current session contains a logged in customer */
      loggedIn?: components["schemas"]["LoggedInModel"];
      /** @description Current location data for the session */
      location?: components["schemas"]["LocationModel"];
    };
    /** @description Order Complete object */
    OrderCompleteModel: {
      /** @description Order number */
      order?: string;
      /**
       * @description Possible values: 'untouched', 'progress', 'ok', 'archived', 'failed'. Status for the order.
       *                 Differs depending on how far in the order process the order is
       * @enum {string}
       */
      status?: "untouched" | "progress" | "ok" | "archived" | "failed";
      /**
       * @description Possible values: 'Pending', 'Confirmed', 'Processing', 'Completed', 'Archived', 'Canceled', 'Incomplete'. Explanation of the order status
       * @enum {string}
       */
      statusDescription?:
        | "Pending"
        | "Confirmed"
        | "Processing"
        | "Completed"
        | "Archived"
        | "Canceled"
        | "Incomplete";
      /** @description Datetime, "YYYY-MM-DD HH:ii:ss" like "2015-12-24 13:25:01". Order creation date. Timezone is defined by the current Centra instance */
      date?: string;
      /**
       * @description If order was a gift certificate purchase,
       *             this contains the gift message
       */
      giftMessage?: string;
      /** @description Language ID. Selected language for the current selection */
      language?: string;
      /** @description Currency code (ISO 4217). Currency for the selection */
      currency?: string;
      /** @description Selected payment method id */
      paymentMethod?: string;
      /** @description Selected payment method name */
      paymentMethodName?: string;
      /** @description Selected shipping method id */
      shippingMethod?: string;
      /** @description Selected shipping method name */
      shippingMethodName?: string;
      /**
       * @description Optional. Contains properties added by installed plugins
       *                 <br /><br />Ex: `paymentHTML`, string, optional.
       *                 Current checkout script for current order. Used for KCO/Klarna Checkout
       *                 <br /><br />Ex: `klarnaReplaceSnippet`, boolean, optional. If KCO should be reloaded or not
       *                 <br /><br />Ex: `shipwallet`, object, optional. Used for Ingrid widget
       *                 <br /><br />Ex: `shipwallet_reload`, bool, optional. Used for Ingrid widget
       */
      pluginFields?: { [key: string]: components["schemas"]["AnyValue"] };
      /**
       * @description Optional. Is added as soon as any installed plugin wants to load it.
       *                 Centra Checkout Script for supporting simple JavaScript hooks
       *                 in checkout process to make sure all payment checkout windows
       *                 are properly reloaded when selection changes
       */
      centraCheckoutScript?: string;
      items?: (Partial<components["schemas"]["SelectionItemModel"]> &
        Partial<components["schemas"]["SelectionBundleModel"]>)[];
      discounts?: {
        /** @description If any discount was applied to the order */
        anyDiscount?: boolean;
        /** @description string. Formatted price with currency prefix/suffix. Total discount amount applied to the order */
        discount?: string;
        /** @description number. Price value as a float, example: 14.11. Total discount amount applied to the order */
        discountAsNumber?: number;
        automaticDiscounts?: {
          /** @description If discount was applied automatically */
          automaticDiscount?: boolean;
          /** @description Name of this discount */
          name?: string;
          /** @description string. Formatted price with currency prefix/suffix. Amount reduced by this discount */
          priceOff?: string;
          /** @description number. Price value as a float, example: 14.11. Amount reduced by this discount */
          priceOffAsNumber?: number;
        }[];
        vouchers?: {
          /** @description Voucher code */
          voucher?: string;
          /**
           * @description Possible values: 'code', 'uri', 'other'. Type of voucher added
           * @enum {string}
           */
          type?: "code" | "uri" | "other";
          /** @description Description of voucher */
          description?: string;
          /** @description string. Formatted price with currency prefix/suffix. Amount reduced by this voucher */
          priceOff?: string;
          /** @description number. Price value as a float, example: 14.11. Amount reduced by this voucher */
          priceOffAsNumber?: number;
        }[];
      };
      totals?: {
        /** @description string. Formatted price with currency prefix/suffix. Total price for all items */
        itemsTotalPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Total price for all items */
        itemsTotalPriceAsNumber?: number;
        /** @description string or false. Total discount. false if none */
        totalDiscountPrice?: string | boolean;
        /** @description number or false. Total discount as number. false if none */
        totalDiscountPriceAsNumber?: number | boolean;
        /** @description string. Formatted price with currency prefix/suffix. Shipping cost */
        shippingPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Shipping cost */
        shippingPriceAsNumber?: number;
        /** @description If handling cost was added to shipping cost */
        handlingCostAddedToShippingPrice?: boolean;
        /** @description Number. Total quantity in selection */
        totalQuantity?: number;
        /** @description string or false. Tax deducted from selection, if applicable. default false */
        taxDeducted?: string | boolean;
        /** @description number or false. Tax deducted from selection, if applicable. default false */
        taxDeductedAsNumber?: number | boolean;
        /** @description number or false. Tax added on selection, if applicable else false */
        taxAdded?: number | boolean;
        /** @description string or false. Tax added from selection, if applicable else false */
        taxAddedAsNumber?: string | boolean;
        /** @description Number. Percentage of tax on the selection */
        taxPercent?: number;
        /** @description string. Formatted price with currency prefix/suffix. Grand total for selection */
        grandTotalPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Grand total for selection */
        grandTotalPriceAsNumber?: number;
        /** @description string. Formatted price with currency prefix/suffix. Grand total tax for selection */
        grandTotalPriceTax?: string;
        /** @description number. Price value as a float, example: 14.11. Grand total tax for selection */
        grandTotalPriceTaxAsNumber?: number;
      };
      /** @description If selection qualifies for VAT exemption */
      vatExempt?: boolean;
      /** @description Additional notes defined on the order */
      additionalNotes?: string;
      address?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        zipCode?: string;
        city?: string;
        state?: string;
        /** @description Country ISO 3166-1 alpha-2, for example SE */
        country?: string;
        countryName?: string;
        phoneNumber?: string;
        vatNumber?: string;
      };
      shippingAddress?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        zipCode?: string;
        city?: string;
        state?: string;
        /** @description Country ISO 3166-1 alpha-2, for example SE */
        country?: string;
        countryName?: string;
        phoneNumber?: string;
      };
      currencyFormat?: components["schemas"]["CurrencyModel"];
    };
    OrderCompleteResponse: {
      /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
      token?: string;
      order?: components["schemas"]["OrderCompleteModel"];
      /** @description All available languages */
      languages?: components["schemas"]["LanguageModel"][];
      /** @description All shippable countries */
      countries?: components["schemas"]["CountryShippableModel"][];
      /** @description Optional. If the current session contains a logged in customer */
      loggedIn?: components["schemas"]["LoggedInModel"];
      /** @description Current location data for the session */
      location?: components["schemas"]["LocationModel"];
    };
    RelatedProductModel: {
      /** @description If any item for this product is available for purchase */
      available?: boolean;
      /** @description Optional. Removed if `measurementChart=false` for product list, always on single product view. */
      measurementChart?: {
        /** @description The unit for the measurement chart */
        unit?: string;
        contents?: {
          /** @description The content for this matrix item */
          content?: string;
          /** @description Integer. The location in the table on the X-axis */
          x?: number;
          /** @description Integer. The location in the table on the Y-axis */
          y?: number;
        }[];
        /** @description Header for each X-axis column. */
        x?: string[];
        /** @description Header for each Y-axis column. */
        y?: string[];
      };
      /** @description Bundle info (if product is a bundle) */
      bundleInfo?: components["schemas"]["BundleInfoModel"];
      /** @description Product Display Item ID */
      product?: string;
      /** @description Product Display Name */
      name?: string;
      /** @description Product URI. Unique URI for the product */
      uri?: string;
      /** @description The specific variant SKU (Either only Product or a combination of Product+Variant) */
      sku?: string;
      /** @description Product SKU */
      productSku?: string;
      /** @description Brand ID */
      brand?: string;
      /** @description Brand name */
      brandName?: string;
      /** @description Brand URI. Unique URI for the brand */
      brandUri?: string;
      /** @description Collection ID */
      collection?: string;
      /** @description Collection name */
      collectionName?: string;
      /** @description Collection URI. Unique URI for the collection */
      collectionUri?: string;
      /** @description Variant Name */
      variantName?: string;
      /** @description Country ISO 3166-1 alpha-2, for example SE. Product Origin */
      countryOfOrigin?: string;
      /** @description Short description of the product */
      excerpt?: string;
      /** @description Short description of the product, formatted as HTML */
      excerptHtml?: string;
      /** @description Description of the product */
      description?: string;
      /** @description Description of the product, formatted as HTML */
      descriptionHtml?: string;
      /** @description Meta title for the product page */
      metaTitle?: string;
      /** @description Meta description for the product page */
      metaDescription?: string;
      /** @description Meta keywords for the product page */
      metaKeywords?: string;
      /** @description The stock unit for this product, default empty */
      stockUnit?: string;
      /** @description Category ID for the canonical category */
      category?: string;
      /** @description Category name for the canonical category, each sub category name as an element. Root category first. */
      categoryName?: string[];
      /** @description Date of creation */
      createdAt?: string;
      /** @description Date of modification */
      modifiedAt?: string;
      /** @description Category URI for the canonical category */
      categoryUri?: string;
      /** @description Product ID in Centra */
      centraProduct?: string;
      /** @description Variant ID in Centra */
      centraVariant?: string;
      /** @description Number. Default 1, minimum allowed quantity for purchase */
      itemQuantityMinimum?: number;
      /** @description Number. Default 1, allowed quantity multiple for purchase */
      itemQuantityMultipleOf?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price for the product */
      price?: string;
      /** @description number. Price value as a float, example: 14.11. Price for the product */
      priceAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price before discount */
      priceBeforeDiscount?: string;
      /** @description number. Price value as a float, example: 14.11. Price before discount */
      priceBeforeDiscountAsNumber?: number;
      /** @description Number. Percent of discount on this product's price */
      discountPercent?: number;
      /** @description If product should be marked with sale */
      showAsOnSale?: boolean;
      /** @description If product should be marked with new */
      showAsNew?: boolean;
      /** @description Size table to sort sizes properly, supports both X and Y axes */
      itemTable?: {
        /** @description Size table units */
        unit?: string;
        /** @description Each X-axis */
        x?: string[];
        /** @description Each Y-axis */
        y?: string[];
        /** @description The divider between X and Y */
        dividerSymbol?: string;
      };
      items?: {
        /** @description Item ID */
        item?: string;
        /** @description EAN for this item */
        ean?: string;
        /** @description Size ID */
        sizeId?: string;
        /** @description Integer. Position on X-axis of itemTable */
        itemTableX?: number;
        /** @description Integer. Position on Y-axis of itemTable */
        itemTableY?: number;
        /** @description Size description */
        name?: string;
        /** @description Product item SKU */
        sku?: string;
        /** @description If product is in stock or not */
        stock?:
          | ("preorder" | "infinite" | "yes" | "no" | "few")
          | number
          | string;
        /** @description Stock quantities per published warehouse in the Checkout plugin. Requires shared secret. */
        warehouses?: {
          /** @description Integer. Warehouse ID */
          warehouse?: number;
          /** @description Number. Stock quantity */
          stock?: number;
        }[];
        subscriptionPlans?: {
          name?: string;
          /** @description Number. Number between 0 and 100 inclusive. */
          discountPercent?: number;
          /**
           * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
           * @enum {string}
           */
          interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
          /**
           * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
           * @enum {string}
           */
          intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
          /** @description Integer. Deprecated. Use `intervalValue` instead. */
          value?: number;
          /** @description Integer */
          intervalValue?: number;
          /** @description Integer. Subscription Plan ID. Deprecated - use `subscriptionPlan` instead */
          id?: number;
          /**
           * @description Possible values: 'ACTIVE', 'INACTIVE', 'CANCELLED'
           * @enum {string}
           */
          status?: string;
          /** @description Integer. Subscription Plan ID. */
          subscriptionPlan?: number;
        }[];
      }[];
      categories?: components["schemas"]["CategoryForProductModel"][];
      /** @description For each image size key, an array with URLs to the images for the product */
      media?: {
        "*imageKey*"?: string[];
      };
      mediaObjects?: {
        /** @description Media ID */
        media?: string;
        /** @description For each image size key, an array with URLs to the images for the product */
        sources?: {
          "*imageKey*"?: string[];
        };
        attributes?: { [key: string]: string };
      };
      /** @description If product is in preview mode or not */
      preview?: boolean;
      /** @description What type of relation type this product has. Default is `variant` */
      relation?: string | string | string;
      /**
       * @description Optional.
       *                 Custom attributes applied to this product and exposed in the Checkout plugin settings
       */
      "*customAttribute*"?: {
        [key: string]: components["schemas"]["AnyValue"];
      };
      /** @description Available subscription plans */
      subscriptionPlans?: components["schemas"]["SubscriptionPlanModel"][];
    };
    ProductModel: {
      /** @description If any item for this product is available for purchase */
      available?: boolean;
      /**
       * @description Optional. If the product has relations.
       *                     If `relatedProducts=true` the full ProductForRelatedModel is used, else
       *                     a small object containing information about the related product and its availability is shown
       */
      relatedProducts?:
        | components["schemas"]["RelatedProductModel"]
        | {
            /** @description Product Item ID */
            product?: string;
            /** @description If any item for this product is available for purchase */
            available?: boolean;
            /** @description For each image size key, an array with URLs to the images for the product */
            media?: {
              "*imageKey*"?: string[];
            };
            /** @description What type of relation type this product has. Default is `variant` */
            relation?: string | string | string;
          };
      /** @description Optional. Removed if `measurementChart=false` for product list, always on single product view. */
      measurementChart?: {
        /** @description The unit for the measurement chart */
        unit?: string;
        contents?: {
          /** @description The content for this matrix item */
          content?: string;
          /** @description Integer. The location in the table on the X-axis */
          x?: number;
          /** @description Integer. The location in the table on the Y-axis */
          y?: number;
        }[];
        /** @description Header for each X-axis column. */
        x?: string[];
        /** @description Header for each Y-axis column. */
        y?: string[];
      };
      /** @description Bundle info (if product is a bundle) */
      bundleInfo?: components["schemas"]["BundleInfoModel"];
      /** @description Product Display Item ID */
      product?: string;
      /** @description Product Display Name */
      name?: string;
      /** @description Product URI. Unique URI for the product */
      uri?: string;
      /** @description The specific variant SKU (Either only Product or a combination of Product+Variant) */
      sku?: string;
      /** @description Product SKU */
      productSku?: string;
      /** @description Brand ID */
      brand?: string;
      /** @description Brand name */
      brandName?: string;
      /** @description Brand URI. Unique URI for the brand */
      brandUri?: string;
      /** @description Collection ID */
      collection?: string;
      /** @description Collection name */
      collectionName?: string;
      /** @description Collection URI. Unique URI for the collection */
      collectionUri?: string;
      /** @description Variant Name */
      variantName?: string;
      /** @description Country ISO 3166-1 alpha-2, for example SE. Product Origin */
      countryOfOrigin?: string;
      /** @description Short description of the product */
      excerpt?: string;
      /** @description Short description of the product, formatted as HTML */
      excerptHtml?: string;
      /** @description Description of the product */
      description?: string;
      /** @description Description of the product, formatted as HTML */
      descriptionHtml?: string;
      /** @description Meta title for the product page */
      metaTitle?: string;
      /** @description Meta description for the product page */
      metaDescription?: string;
      /** @description Meta keywords for the product page */
      metaKeywords?: string;
      /** @description The stock unit for this product, default empty */
      stockUnit?: string;
      /** @description Category ID for the canonical category */
      category?: string;
      /** @description Category name for the canonical category, each sub category name as an element. Root category first. */
      categoryName?: string[];
      /** @description Date of creation */
      createdAt?: string;
      /** @description Date of modification */
      modifiedAt?: string;
      /** @description Category URI for the canonical category */
      categoryUri?: string;
      /** @description Product ID in Centra */
      centraProduct?: string;
      /** @description Variant ID in Centra */
      centraVariant?: string;
      /** @description Number. Default 1, minimum allowed quantity for purchase */
      itemQuantityMinimum?: number;
      /** @description Number. Default 1, allowed quantity multiple for purchase */
      itemQuantityMultipleOf?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price for the product */
      price?: string;
      /** @description number. Price value as a float, example: 14.11. Price for the product */
      priceAsNumber?: number;
      /** @description string. Formatted price with currency prefix/suffix. Price before discount */
      priceBeforeDiscount?: string;
      /** @description number. Price value as a float, example: 14.11. Price before discount */
      priceBeforeDiscountAsNumber?: number;
      /** @description Number. Percent of discount on this product's price */
      discountPercent?: number;
      /** @description If product should be marked with sale */
      showAsOnSale?: boolean;
      /** @description If product should be marked with new */
      showAsNew?: boolean;
      /** @description Size table to sort sizes properly, supports both X and Y axes */
      itemTable?: {
        /** @description Size table units */
        unit?: string;
        /** @description Each X-axis */
        x?: string[];
        /** @description Each Y-axis */
        y?: string[];
        /** @description The divider between X and Y */
        dividerSymbol?: string;
      };
      items?: {
        /** @description Item ID */
        item?: string;
        /** @description EAN for this item */
        ean?: string;
        /** @description Size ID */
        sizeId?: string;
        /** @description Integer. Position on X-axis of itemTable */
        itemTableX?: number;
        /** @description Integer. Position on Y-axis of itemTable */
        itemTableY?: number;
        /** @description Size description */
        name?: string;
        /** @description Product item SKU */
        sku?: string;
        /** @description If product is in stock or not */
        stock?:
          | ("preorder" | "infinite" | "yes" | "no" | "few")
          | number
          | string;
        /** @description Stock quantities per published warehouse in the Checkout plugin. Requires shared secret. */
        warehouses?: {
          /** @description Integer. Warehouse ID */
          warehouse?: number;
          /** @description Number. Stock quantity */
          stock?: number;
        }[];
        subscriptionPlans?: {
          name?: string;
          /** @description Number. Number between 0 and 100 inclusive. */
          discountPercent?: number;
          /**
           * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
           * @enum {string}
           */
          interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
          /**
           * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
           * @enum {string}
           */
          intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
          /** @description Integer. Deprecated. Use `intervalValue` instead. */
          value?: number;
          /** @description Integer */
          intervalValue?: number;
          /** @description Integer. Subscription Plan ID. Deprecated - use `subscriptionPlan` instead */
          id?: number;
          /**
           * @description Possible values: 'ACTIVE', 'INACTIVE', 'CANCELLED'
           * @enum {string}
           */
          status?: string;
          /** @description Integer. Subscription Plan ID. */
          subscriptionPlan?: number;
        }[];
      }[];
      categories?: components["schemas"]["CategoryForProductModel"][];
      /** @description For each image size key, an array with URLs to the images for the product */
      media?: {
        "*imageKey*"?: string[];
      };
      mediaObjects?: {
        /** @description Media ID */
        media?: string;
        /** @description For each image size key, an array with URLs to the images for the product */
        sources?: {
          "*imageKey*"?: string[];
        };
        attributes?: { [key: string]: string };
      };
      /** @description If product is in preview mode or not */
      preview?: boolean;
      /** @description What type of relation type this product has. Default is `variant` */
      relation?: string | string | string;
      /**
       * @description Optional.
       *                 Custom attributes applied to this product and exposed in the Checkout plugin settings
       */
      "*customAttribute*"?: {
        [key: string]: components["schemas"]["AnyValue"];
      };
      /** @description Available subscription plans */
      subscriptionPlans?: components["schemas"]["SubscriptionPlanModel"][];
    };
    CountryShippableAuthorizedModel: {
      /** @description Country ISO 3166-1 alpha-2, for example SE */
      country?: string;
      /** @description Name of country */
      name?: string;
      /** @description If country is in eu or not */
      eu?: boolean;
      /** @description Language ID */
      language?: string;
      /** @description Currency code (ISO 4217). Preferred currency for this country */
      currency?: string;
      /** @description This property only shows up if the country actually has states. */
      states?: {
        /**
         * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
         *         When used as input, the correct description of the state will also be allowed.
         */
        state?: string;
        /** @description Name of state */
        name?: string;
      }[];
      /** @description Preferred market for this country. Requires shared secret */
      market?: string;
      /** @description Preferred pricelist for this country. Requires shared secret */
      pricelist?: string;
    };
    CountryAuthorizedModel: {
      /** @description Country ISO 3166-1 alpha-2, for example SE */
      country?: string;
      /** @description Name of country */
      name?: string;
      /** @description If country is in eu or not */
      eu?: boolean;
      /** @description If country is allowed to be shipped to */
      shipTo?: boolean;
      /** @description Language ID */
      language?: string;
      /** @description Currency code (ISO 4217). Preferred currency for this country */
      currency?: string;
      /** @description This property only shows up if the country actually has states. */
      states?: {
        /**
         * @description State ISO code, maxlength 6, Example: CA for California (US) and NSW for New South West (AU).
         *         When used as input, the correct description of the state will also be allowed.
         */
        state?: string;
        /** @description Name of state */
        name?: string;
      }[];
      /** @description Preferred market for this country. Requires shared secret */
      market?: string;
      /** @description Preferred pricelist for this country. Requires shared secret */
      pricelist?: string;
    };
    /** @description Order Created object */
    OrderCreatedModel: {
      /** @description Order number */
      order?: string;
      /**
       * @description Possible values: 'untouched', 'progress', 'ok', 'archived', 'failed'. Status for the order.
       *                 Differs depending on how far in the order process the order is
       * @enum {string}
       */
      status?: "untouched" | "progress" | "ok" | "archived" | "failed";
      /**
       * @description Possible values: 'Pending', 'Confirmed', 'Processing', 'Completed', 'Archived', 'Canceled', 'Incomplete'. Explanation of the order status
       * @enum {string}
       */
      statusDescription?:
        | "Pending"
        | "Confirmed"
        | "Processing"
        | "Completed"
        | "Archived"
        | "Canceled"
        | "Incomplete";
      /** @description Datetime, "YYYY-MM-DD HH:ii:ss" like "2015-12-24 13:25:01". Order creation date. Timezone is defined by the current Centra instance */
      date?: string;
      /** @description HTML needed to inject into the DOM to trigger affiliate tracking scripts */
      affiliateHtml?: string;
      /**
       * @description If order was a gift certificate purchase,
       *             this contains the gift message
       */
      giftMessage?: string;
      /** @description Language ID. Selected language for the current selection */
      language?: string;
      /** @description Currency code (ISO 4217). Currency for the selection */
      currency?: string;
      /** @description Selected payment method id */
      paymentMethod?: string;
      /** @description Selected payment method name */
      paymentMethodName?: string;
      /** @description Selected shipping method id */
      shippingMethod?: string;
      /** @description Selected shipping method name */
      shippingMethodName?: string;
      /**
       * @description Optional. Contains properties added by installed plugins
       *                 <br /><br />Ex: `paymentHTML`, string, optional.
       *                 Current checkout script for current order. Used for KCO/Klarna Checkout
       *                 <br /><br />Ex: `klarnaReplaceSnippet`, boolean, optional. If KCO should be reloaded or not
       *                 <br /><br />Ex: `shipwallet`, object, optional. Used for Ingrid widget
       *                 <br /><br />Ex: `shipwallet_reload`, bool, optional. Used for Ingrid widget
       */
      pluginFields?: { [key: string]: components["schemas"]["AnyValue"] };
      /**
       * @description Optional. Is added as soon as any installed plugin wants to load it.
       *                 Centra Checkout Script for supporting simple JavaScript hooks
       *                 in checkout process to make sure all payment checkout windows
       *                 are properly reloaded when selection changes
       */
      centraCheckoutScript?: string;
      items?: (Partial<components["schemas"]["SelectionItemModel"]> &
        Partial<components["schemas"]["SelectionBundleModel"]>)[];
      discounts?: {
        /** @description If any discount was applied to the order */
        anyDiscount?: boolean;
        /** @description string. Formatted price with currency prefix/suffix. Total discount amount applied to the order */
        discount?: string;
        /** @description number. Price value as a float, example: 14.11. Total discount amount applied to the order */
        discountAsNumber?: number;
        automaticDiscounts?: {
          /** @description If discount was applied automatically */
          automaticDiscount?: boolean;
          /** @description Name of this discount */
          name?: string;
          /** @description string. Formatted price with currency prefix/suffix. Amount reduced by this discount */
          priceOff?: string;
          /** @description number. Price value as a float, example: 14.11. Amount reduced by this discount */
          priceOffAsNumber?: number;
        }[];
        vouchers?: {
          /** @description Voucher code */
          voucher?: string;
          /**
           * @description Possible values: 'code', 'uri', 'other'. Type of voucher added
           * @enum {string}
           */
          type?: "code" | "uri" | "other";
          /** @description Description of voucher */
          description?: string;
          /** @description string. Formatted price with currency prefix/suffix. Amount reduced by this voucher */
          priceOff?: string;
          /** @description number. Price value as a float, example: 14.11. Amount reduced by this voucher */
          priceOffAsNumber?: number;
        }[];
      };
      totals?: {
        /** @description string. Formatted price with currency prefix/suffix. Total price for all items */
        itemsTotalPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Total price for all items */
        itemsTotalPriceAsNumber?: number;
        /** @description string or false. Total discount. false if none */
        totalDiscountPrice?: string | boolean;
        /** @description number or false. Total discount as number. false if none */
        totalDiscountPriceAsNumber?: number | boolean;
        /** @description string. Formatted price with currency prefix/suffix. Shipping cost */
        shippingPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Shipping cost */
        shippingPriceAsNumber?: number;
        /** @description If handling cost was added to shipping cost */
        handlingCostAddedToShippingPrice?: boolean;
        /** @description Number. Total quantity in selection */
        totalQuantity?: number;
        /** @description string or false. Tax deducted from selection, if applicable. default false */
        taxDeducted?: string | boolean;
        /** @description number or false. Tax deducted from selection, if applicable. default false */
        taxDeductedAsNumber?: number | boolean;
        /** @description number or false. Tax added on selection, if applicable else false */
        taxAdded?: number | boolean;
        /** @description string or false. Tax added from selection, if applicable else false */
        taxAddedAsNumber?: string | boolean;
        /** @description Number. Percentage of tax on the selection */
        taxPercent?: number;
        /** @description string. Formatted price with currency prefix/suffix. Grand total for selection */
        grandTotalPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Grand total for selection */
        grandTotalPriceAsNumber?: number;
        /** @description string. Formatted price with currency prefix/suffix. Grand total tax for selection */
        grandTotalPriceTax?: string;
        /** @description number. Price value as a float, example: 14.11. Grand total tax for selection */
        grandTotalPriceTaxAsNumber?: number;
      };
      /** @description If selection qualifies for VAT exemption */
      vatExempt?: boolean;
      /** @description Additional notes defined on the order */
      additionalNotes?: string;
      address?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        zipCode?: string;
        city?: string;
        state?: string;
        /** @description Country ISO 3166-1 alpha-2, for example SE */
        country?: string;
        countryName?: string;
        phoneNumber?: string;
        vatNumber?: string;
      };
      shippingAddress?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        zipCode?: string;
        city?: string;
        state?: string;
        /** @description Country ISO 3166-1 alpha-2, for example SE */
        country?: string;
        countryName?: string;
        phoneNumber?: string;
      };
      currencyFormat?: components["schemas"]["CurrencyModel"];
    };
    OrderCreatedDirectlyResponse: {
      /**
       * @description Possible values: 'success'. Order was successfully completed
       * @enum {string}
       */
      action?: "success";
      /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
      token?: string;
      order?: components["schemas"]["OrderCreatedModel"];
      /** @description All available languages */
      languages?: components["schemas"]["LanguageModel"][];
      /** @description All shippable countries */
      countries?: components["schemas"]["CountryShippableModel"][];
      /** @description Optional. If the current session contains a logged in customer */
      loggedIn?: components["schemas"]["LoggedInModel"];
      /** @description Current location data for the session */
      location?: components["schemas"]["LocationModel"];
    };
    OrderCreatedResponse: {
      /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
      token?: string;
      order?: components["schemas"]["OrderCreatedModel"];
      /** @description All available languages */
      languages?: components["schemas"]["LanguageModel"][];
      /** @description All shippable countries */
      countries?: components["schemas"]["CountryShippableModel"][];
      /** @description Optional. If the current session contains a logged in customer */
      loggedIn?: components["schemas"]["LoggedInModel"];
      /** @description Current location data for the session */
      location?: components["schemas"]["LocationModel"];
    };
    /** @description Order object */
    OrderModel: {
      /** @description Order number */
      order?: string;
      /**
       * @description Possible values: 'untouched', 'progress', 'ok', 'archived', 'failed'. Status for the order.
       *                 Differs depending on how far in the order process the order is
       * @enum {string}
       */
      status?: "untouched" | "progress" | "ok" | "archived" | "failed";
      /**
       * @description Possible values: 'Pending', 'Confirmed', 'Processing', 'Completed', 'Archived', 'Canceled', 'Incomplete'. Explanation of the order status
       * @enum {string}
       */
      statusDescription?:
        | "Pending"
        | "Confirmed"
        | "Processing"
        | "Completed"
        | "Archived"
        | "Canceled"
        | "Incomplete";
      /** @description Datetime, "YYYY-MM-DD HH:ii:ss" like "2015-12-24 13:25:01". Order creation date. Timezone is defined by the current Centra instance */
      date?: string;
      /**
       * @description If order was a gift certificate purchase,
       *             this contains the gift message
       */
      giftMessage?: string;
      shipments?: {
        /** @description Shipment ID */
        shipmentId?: string;
        /** @description Datetime, "YYYY-MM-DD HH:ii:ss" like "2015-12-24 13:25:01" */
        shippedDate?: string;
        /** @description Carrier used */
        carrier?: string;
        /** @description Service used */
        service?: string;
        /** @description Tracking number for the shipment */
        trackingId?: string;
        /** @description URL for tracking the shipment */
        trackingUrl?: string;
        /** @description Return slip tracking number */
        returnSlipTracking?: string;
        /** @description Message added to the shipment. Could be null */
        additionalMessage?: string;
      }[];
      /** @description Language ID. Selected language for the current selection */
      language?: string;
      /** @description Currency code (ISO 4217). Currency for the selection */
      currency?: string;
      /** @description Selected payment method id */
      paymentMethod?: string;
      /** @description Selected payment method name */
      paymentMethodName?: string;
      /** @description Selected shipping method id */
      shippingMethod?: string;
      /** @description Selected shipping method name */
      shippingMethodName?: string;
      /**
       * @description Optional. Contains properties added by installed plugins
       *                 <br /><br />Ex: `paymentHTML`, string, optional.
       *                 Current checkout script for current order. Used for KCO/Klarna Checkout
       *                 <br /><br />Ex: `klarnaReplaceSnippet`, boolean, optional. If KCO should be reloaded or not
       *                 <br /><br />Ex: `shipwallet`, object, optional. Used for Ingrid widget
       *                 <br /><br />Ex: `shipwallet_reload`, bool, optional. Used for Ingrid widget
       */
      pluginFields?: { [key: string]: components["schemas"]["AnyValue"] };
      /**
       * @description Optional. Is added as soon as any installed plugin wants to load it.
       *                 Centra Checkout Script for supporting simple JavaScript hooks
       *                 in checkout process to make sure all payment checkout windows
       *                 are properly reloaded when selection changes
       */
      centraCheckoutScript?: string;
      items?: (Partial<components["schemas"]["SelectionItemModel"]> &
        Partial<components["schemas"]["SelectionBundleModel"]>)[];
      discounts?: {
        /** @description If any discount was applied to the order */
        anyDiscount?: boolean;
        /** @description string. Formatted price with currency prefix/suffix. Total discount amount applied to the order */
        discount?: string;
        /** @description number. Price value as a float, example: 14.11. Total discount amount applied to the order */
        discountAsNumber?: number;
        automaticDiscounts?: {
          /** @description If discount was applied automatically */
          automaticDiscount?: boolean;
          /** @description Name of this discount */
          name?: string;
          /** @description string. Formatted price with currency prefix/suffix. Amount reduced by this discount */
          priceOff?: string;
          /** @description number. Price value as a float, example: 14.11. Amount reduced by this discount */
          priceOffAsNumber?: number;
        }[];
        vouchers?: {
          /** @description Voucher code */
          voucher?: string;
          /**
           * @description Possible values: 'code', 'uri', 'other'. Type of voucher added
           * @enum {string}
           */
          type?: "code" | "uri" | "other";
          /** @description Description of voucher */
          description?: string;
          /** @description string. Formatted price with currency prefix/suffix. Amount reduced by this voucher */
          priceOff?: string;
          /** @description number. Price value as a float, example: 14.11. Amount reduced by this voucher */
          priceOffAsNumber?: number;
        }[];
      };
      totals?: {
        /** @description string. Formatted price with currency prefix/suffix. Total price for all items */
        itemsTotalPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Total price for all items */
        itemsTotalPriceAsNumber?: number;
        /** @description string or false. Total discount. false if none */
        totalDiscountPrice?: string | boolean;
        /** @description number or false. Total discount as number. false if none */
        totalDiscountPriceAsNumber?: number | boolean;
        /** @description string. Formatted price with currency prefix/suffix. Shipping cost */
        shippingPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Shipping cost */
        shippingPriceAsNumber?: number;
        /** @description If handling cost was added to shipping cost */
        handlingCostAddedToShippingPrice?: boolean;
        /** @description Number. Total quantity in selection */
        totalQuantity?: number;
        /** @description string or false. Tax deducted from selection, if applicable. default false */
        taxDeducted?: string | boolean;
        /** @description number or false. Tax deducted from selection, if applicable. default false */
        taxDeductedAsNumber?: number | boolean;
        /** @description number or false. Tax added on selection, if applicable else false */
        taxAdded?: number | boolean;
        /** @description string or false. Tax added from selection, if applicable else false */
        taxAddedAsNumber?: string | boolean;
        /** @description Number. Percentage of tax on the selection */
        taxPercent?: number;
        /** @description string. Formatted price with currency prefix/suffix. Grand total for selection */
        grandTotalPrice?: string;
        /** @description number. Price value as a float, example: 14.11. Grand total for selection */
        grandTotalPriceAsNumber?: number;
        /** @description string. Formatted price with currency prefix/suffix. Grand total tax for selection */
        grandTotalPriceTax?: string;
        /** @description number. Price value as a float, example: 14.11. Grand total tax for selection */
        grandTotalPriceTaxAsNumber?: number;
      };
      /** @description If selection qualifies for VAT exemption */
      vatExempt?: boolean;
      /** @description Additional notes defined on the order */
      additionalNotes?: string;
      address?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        zipCode?: string;
        city?: string;
        state?: string;
        /** @description Country ISO 3166-1 alpha-2, for example SE */
        country?: string;
        countryName?: string;
        phoneNumber?: string;
        vatNumber?: string;
      };
      shippingAddress?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        zipCode?: string;
        city?: string;
        state?: string;
        /** @description Country ISO 3166-1 alpha-2, for example SE */
        country?: string;
        countryName?: string;
        phoneNumber?: string;
      };
      currencyFormat?: components["schemas"]["CurrencyModel"];
    };
    OrdersResponse: {
      /** @description Token for the current session, maintained by sending it as an API-token header or inside the Accept header. Will be `null` if API-token header value is `none` */
      token?: string;
      orders?: components["schemas"]["OrderModel"][];
      ordersPaging?: {
        /** @description Number */
        from?: number;
        /** @description Number */
        size?: number;
        /** @description Number */
        totalSize?: number;
      };
      /** @description All available languages */
      languages?: components["schemas"]["LanguageModel"][];
      /** @description All shippable countries */
      countries?: components["schemas"]["CountryShippableModel"][];
      /** @description Optional. If the current session contains a logged in customer */
      loggedIn?: components["schemas"]["LoggedInModel"];
      /** @description Current location data for the session */
      location?: components["schemas"]["LocationModel"];
    };
    RelatedProductAllModel: {
      /**
       * @description Optional. If `pricelist=all`.
       *                         Object with Pricelist ID as the key, for each pricelist the product is in
       */
      prices?: {
        "*PricelistID*"?: {
          /** @description string. Formatted price with currency prefix/suffix. Price for the product */
          price?: string;
          /** @description number. Price value as a float, example: 14.11. Price for the product */
          priceAsNumber?: number;
          /** @description string. Formatted price with currency prefix/suffix. Price before discount */
          priceBeforeDiscount?: string;
          /** @description number. Price value as a float, example: 14.11. Price before discount */
          priceBeforeDiscountAsNumber?: number;
          /** @description Number. Percent of discount on this product's price */
          discountPercent?: number;
          /** @description If product should be marked with sale */
          showAsOnSale?: boolean;
          /** @description If product should be marked with new */
          showAsNew?: boolean;
        };
      };
      /** @description Integer. Optional. If `market=all`. List of the Market IDs the product is available in */
      markets?: number[];
      /** @description If any item for this product is available for purchase */
      available?: boolean;
      /** @description Optional. Removed if `measurementChart=false` for product list, always on single product view. */
      measurementChart?: {
        /** @description The unit for the measurement chart */
        unit?: string;
        contents?: {
          /** @description The content for this matrix item */
          content?: string;
          /** @description Integer. The location in the table on the X-axis */
          x?: number;
          /** @description Integer. The location in the table on the Y-axis */
          y?: number;
        }[];
        /** @description Header for each X-axis column. */
        x?: string[];
        /** @description Header for each Y-axis column. */
        y?: string[];
      };
      /** @description Bundle info (if product is a bundle) */
      bundleInfo?: components["schemas"]["BundleInfoModel"];
      /** @description Product Display Item ID */
      product?: string;
      /** @description Product Display Name */
      name?: string;
      /** @description Product URI. Unique URI for the product */
      uri?: string;
      /** @description The specific variant SKU (Either only Product or a combination of Product+Variant) */
      sku?: string;
      /** @description Product SKU */
      productSku?: string;
      /** @description Brand ID */
      brand?: string;
      /** @description Brand name */
      brandName?: string;
      /** @description Brand URI. Unique URI for the brand */
      brandUri?: string;
      /** @description Collection ID */
      collection?: string;
      /** @description Collection name */
      collectionName?: string;
      /** @description Collection URI. Unique URI for the collection */
      collectionUri?: string;
      /** @description Variant Name */
      variantName?: string;
      /** @description Country ISO 3166-1 alpha-2, for example SE. Product Origin */
      countryOfOrigin?: string;
      /** @description Short description of the product */
      excerpt?: string;
      /** @description Short description of the product, formatted as HTML */
      excerptHtml?: string;
      /** @description Description of the product */
      description?: string;
      /** @description Description of the product, formatted as HTML */
      descriptionHtml?: string;
      /** @description Meta title for the product page */
      metaTitle?: string;
      /** @description Meta description for the product page */
      metaDescription?: string;
      /** @description Meta keywords for the product page */
      metaKeywords?: string;
      /** @description The stock unit for this product, default empty */
      stockUnit?: string;
      /** @description Category ID for the canonical category */
      category?: string;
      /** @description Category name for the canonical category, each sub category name as an element. Root category first. */
      categoryName?: string[];
      /** @description Date of creation */
      createdAt?: string;
      /** @description Date of modification */
      modifiedAt?: string;
      /** @description Category URI for the canonical category */
      categoryUri?: string;
      /** @description Product ID in Centra */
      centraProduct?: string;
      /** @description Variant ID in Centra */
      centraVariant?: string;
      /** @description Number. Default 1, minimum allowed quantity for purchase */
      itemQuantityMinimum?: number;
      /** @description Number. Default 1, allowed quantity multiple for purchase */
      itemQuantityMultipleOf?: number;
      /** @description number. Price value as a float, example: 14.11. Price before discount */
      priceBeforeDiscountAsNumber?: number;
      /** @description Size table to sort sizes properly, supports both X and Y axes */
      itemTable?: {
        /** @description Size table units */
        unit?: string;
        /** @description Each X-axis */
        x?: string[];
        /** @description Each Y-axis */
        y?: string[];
        /** @description The divider between X and Y */
        dividerSymbol?: string;
      };
      items?: {
        /** @description Item ID */
        item?: string;
        /** @description EAN for this item */
        ean?: string;
        /** @description Size ID */
        sizeId?: string;
        /** @description Integer. Position on X-axis of itemTable */
        itemTableX?: number;
        /** @description Integer. Position on Y-axis of itemTable */
        itemTableY?: number;
        /** @description Size description */
        name?: string;
        /** @description Product item SKU */
        sku?: string;
        /** @description If product is in stock or not */
        stock?:
          | ("preorder" | "infinite" | "yes" | "no" | "few")
          | number
          | string;
        /** @description Stock quantities per published warehouse in the Checkout plugin. Requires shared secret. */
        warehouses?: {
          /** @description Integer. Warehouse ID */
          warehouse?: number;
          /** @description Number. Stock quantity */
          stock?: number;
        }[];
        subscriptionPlans?: {
          name?: string;
          /** @description Number. Number between 0 and 100 inclusive. */
          discountPercent?: number;
          /**
           * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
           * @enum {string}
           */
          interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
          /**
           * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
           * @enum {string}
           */
          intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
          /** @description Integer. Deprecated. Use `intervalValue` instead. */
          value?: number;
          /** @description Integer */
          intervalValue?: number;
          /** @description Integer. Subscription Plan ID. Deprecated - use `subscriptionPlan` instead */
          id?: number;
          /**
           * @description Possible values: 'ACTIVE', 'INACTIVE', 'CANCELLED'
           * @enum {string}
           */
          status?: string;
          /** @description Integer. Subscription Plan ID. */
          subscriptionPlan?: number;
        }[];
      }[];
      categories?: components["schemas"]["CategoryForProductModel"][];
      /** @description For each image size key, an array with URLs to the images for the product */
      media?: {
        "*imageKey*"?: string[];
      };
      mediaObjects?: {
        /** @description Media ID */
        media?: string;
        /** @description For each image size key, an array with URLs to the images for the product */
        sources?: {
          "*imageKey*"?: string[];
        };
        attributes?: { [key: string]: string };
      };
      /** @description If product is in preview mode or not */
      preview?: boolean;
      /** @description What type of relation type this product has. Default is `variant` */
      relation?: string | string | string;
      /**
       * @description Optional.
       *                 Custom attributes applied to this product and exposed in the Checkout plugin settings
       */
      "*customAttribute*"?: {
        [key: string]: components["schemas"]["AnyValue"];
      };
      /** @description Available subscription plans */
      subscriptionPlans?: components["schemas"]["SubscriptionPlanModel"][];
    };
    /** @description Requires shared secret. Lists products with multiple pricelists/markets */
    ProductAllModel: {
      /**
       * @description Optional. If `pricelist=all`.
       *                         Object with Pricelist ID as the key, for each pricelist the product is in
       */
      prices?: {
        "*PricelistID*"?: {
          /** @description string. Formatted price with currency prefix/suffix. Price for the product */
          price?: string;
          /** @description number. Price value as a float, example: 14.11. Price for the product */
          priceAsNumber?: number;
          /** @description string. Formatted price with currency prefix/suffix. Price before discount */
          priceBeforeDiscount?: string;
          /** @description number. Price value as a float, example: 14.11. Price before discount */
          priceBeforeDiscountAsNumber?: number;
          /** @description Number. Percent of discount on this product's price */
          discountPercent?: number;
          /** @description If product should be marked with sale */
          showAsOnSale?: boolean;
          /** @description If product should be marked with new */
          showAsNew?: boolean;
        };
      };
      /** @description Integer. Optional. If `market=all`. List of the Market IDs the product is available in */
      markets?: number[];
      /** @description If any item for this product is available for purchase */
      available?: boolean;
      /**
       * @description Optional. If the product has relations.
       *                     If `relatedProducts=true` the full ProductForRelatedModel is used, else
       *                     a small object containing information about the related product and its availability is shown
       */
      relatedProducts?:
        | components["schemas"]["RelatedProductAllModel"]
        | {
            /** @description Product Item ID */
            product?: string;
            /** @description If any item for this product is available for purchase */
            available?: boolean;
            /** @description For each image size key, an array with URLs to the images for the product */
            media?: {
              "*imageKey*"?: string[];
            };
            /** @description What type of relation type this product has. Default is `variant` */
            relation?: string | string | string;
          };
      /** @description Optional. Removed if `measurementChart=false` for product list, always on single product view. */
      measurementChart?: {
        /** @description The unit for the measurement chart */
        unit?: string;
        contents?: {
          /** @description The content for this matrix item */
          content?: string;
          /** @description Integer. The location in the table on the X-axis */
          x?: number;
          /** @description Integer. The location in the table on the Y-axis */
          y?: number;
        }[];
        /** @description Header for each X-axis column. */
        x?: string[];
        /** @description Header for each Y-axis column. */
        y?: string[];
      };
      /** @description Bundle info (if product is a bundle) */
      bundleInfo?: components["schemas"]["BundleInfoModel"];
      /** @description Product Display Item ID */
      product?: string;
      /** @description Product Display Name */
      name?: string;
      /** @description Product URI. Unique URI for the product */
      uri?: string;
      /** @description The specific variant SKU (Either only Product or a combination of Product+Variant) */
      sku?: string;
      /** @description Product SKU */
      productSku?: string;
      /** @description Brand ID */
      brand?: string;
      /** @description Brand name */
      brandName?: string;
      /** @description Brand URI. Unique URI for the brand */
      brandUri?: string;
      /** @description Collection ID */
      collection?: string;
      /** @description Collection name */
      collectionName?: string;
      /** @description Collection URI. Unique URI for the collection */
      collectionUri?: string;
      /** @description Variant Name */
      variantName?: string;
      /** @description Country ISO 3166-1 alpha-2, for example SE. Product Origin */
      countryOfOrigin?: string;
      /** @description Short description of the product */
      excerpt?: string;
      /** @description Short description of the product, formatted as HTML */
      excerptHtml?: string;
      /** @description Description of the product */
      description?: string;
      /** @description Description of the product, formatted as HTML */
      descriptionHtml?: string;
      /** @description Meta title for the product page */
      metaTitle?: string;
      /** @description Meta description for the product page */
      metaDescription?: string;
      /** @description Meta keywords for the product page */
      metaKeywords?: string;
      /** @description The stock unit for this product, default empty */
      stockUnit?: string;
      /** @description Category ID for the canonical category */
      category?: string;
      /** @description Category name for the canonical category, each sub category name as an element. Root category first. */
      categoryName?: string[];
      /** @description Date of creation */
      createdAt?: string;
      /** @description Date of modification */
      modifiedAt?: string;
      /** @description Category URI for the canonical category */
      categoryUri?: string;
      /** @description Product ID in Centra */
      centraProduct?: string;
      /** @description Variant ID in Centra */
      centraVariant?: string;
      /** @description Number. Default 1, minimum allowed quantity for purchase */
      itemQuantityMinimum?: number;
      /** @description Number. Default 1, allowed quantity multiple for purchase */
      itemQuantityMultipleOf?: number;
      /** @description number. Price value as a float, example: 14.11. Price before discount */
      priceBeforeDiscountAsNumber?: number;
      /** @description Size table to sort sizes properly, supports both X and Y axes */
      itemTable?: {
        /** @description Size table units */
        unit?: string;
        /** @description Each X-axis */
        x?: string[];
        /** @description Each Y-axis */
        y?: string[];
        /** @description The divider between X and Y */
        dividerSymbol?: string;
      };
      items?: {
        /** @description Item ID */
        item?: string;
        /** @description EAN for this item */
        ean?: string;
        /** @description Size ID */
        sizeId?: string;
        /** @description Integer. Position on X-axis of itemTable */
        itemTableX?: number;
        /** @description Integer. Position on Y-axis of itemTable */
        itemTableY?: number;
        /** @description Size description */
        name?: string;
        /** @description Product item SKU */
        sku?: string;
        /** @description If product is in stock or not */
        stock?:
          | ("preorder" | "infinite" | "yes" | "no" | "few")
          | number
          | string;
        /** @description Stock quantities per published warehouse in the Checkout plugin. Requires shared secret. */
        warehouses?: {
          /** @description Integer. Warehouse ID */
          warehouse?: number;
          /** @description Number. Stock quantity */
          stock?: number;
        }[];
        subscriptionPlans?: {
          name?: string;
          /** @description Number. Number between 0 and 100 inclusive. */
          discountPercent?: number;
          /**
           * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'. Deprecated. Use `intervalType` instead.
           * @enum {string}
           */
          interval?: "DAY" | "WEEK" | "MONTH" | "YEAR";
          /**
           * @description Possible values: 'DAY', 'WEEK', 'MONTH', 'YEAR'
           * @enum {string}
           */
          intervalType?: "DAY" | "WEEK" | "MONTH" | "YEAR";
          /** @description Integer. Deprecated. Use `intervalValue` instead. */
          value?: number;
          /** @description Integer */
          intervalValue?: number;
          /** @description Integer. Subscription Plan ID. Deprecated - use `subscriptionPlan` instead */
          id?: number;
          /**
           * @description Possible values: 'ACTIVE', 'INACTIVE', 'CANCELLED'
           * @enum {string}
           */
          status?: string;
          /** @description Integer. Subscription Plan ID. */
          subscriptionPlan?: number;
        }[];
      }[];
      categories?: components["schemas"]["CategoryForProductModel"][];
      /** @description For each image size key, an array with URLs to the images for the product */
      media?: {
        "*imageKey*"?: string[];
      };
      mediaObjects?: {
        /** @description Media ID */
        media?: string;
        /** @description For each image size key, an array with URLs to the images for the product */
        sources?: {
          "*imageKey*"?: string[];
        };
        attributes?: { [key: string]: string };
      };
      /** @description If product is in preview mode or not */
      preview?: boolean;
      /** @description What type of relation type this product has. Default is `variant` */
      relation?: string | string | string;
      /**
       * @description Optional.
       *                 Custom attributes applied to this product and exposed in the Checkout plugin settings
       */
      "*customAttribute*"?: {
        [key: string]: components["schemas"]["AnyValue"];
      };
      /** @description Available subscription plans */
      subscriptionPlans?: components["schemas"]["SubscriptionPlanModel"][];
    };
    /** @description Collection object */
    CollectionModel: {
      /** @description Collection ID */
      collection?: string;
      /** @description URI of the collection */
      uri?: string;
      /** @description Collection name */
      name?: string;
    };
    /** @description Category object */
    CategoryModel: {
      /** @description Category ID */
      category?: string;
      /** @description Each sub category name as an element. Root category first. */
      name?: string[];
      /** @description Full category URI */
      uri?: string;
      /** @description Optional. Category ID for the parent category if there is one */
      inCategory?: string;
      /** @description Meta keywords for the category */
      metaKeywords?: string;
      /** @description Meta title for the category */
      metaTitle?: string;
      /** @description Meta description for the category */
      metaDescription?: string;
    };
    /** @description Brand object */
    BrandModel: {
      /** @description Brand ID */
      brand?: string;
      /** @description URI of the brand */
      uri?: string;
      /** @description Brand name */
      name?: string;
      /** @description Meta keywords for the brand */
      metaKeywords?: string;
      /** @description Meta title for the brand */
      metaTitle?: string;
      /** @description Meta description for the brand */
      metaDescription?: string;
    };
    /** @description CMS article object */
    CmsArticleModel: {
      /** @description Article ID */
      article?: string;
      /** @description Main title of the article */
      title?: string;
      /** @description Title used for listings */
      listTitle?: string;
      /** @description URL for image used for listings */
      listImage?: string;
      /** @description URI for the CMS article */
      uri?: string;
      /** @description Datetime, "YYYY-MM-DD HH:ii:ss" like "2015-12-24 13:25:01". Published date */
      date?: string;
      /** @description Author of the article */
      author?: string;
      /** @description Name of author */
      authorName?: string;
      /** @description Author description */
      authorDescription?: string;
      /** @description URL for image of author */
      authorImageUrl?: string;
      /** @description Section ID. Default is `pages` */
      section?: string;
      /** @description URI for the section. If section is `pages` this URI is empty */
      sectionUri?: string;
      metaKeywords?: string;
      metaDescription?: string;
      /** @description Text used for pre-heading */
      preHeading?: string;
      /** @description Text used for sub-heading */
      subHeading?: string;
      tags?: string[];
      /** @description Integer. List of CMS Article IDs that this article relates to */
      relatedArticles?: number[];
      /** @description Deprecated, do not use */
      products?: {
        /** @description Do not use */
        deprecated?: string;
      }[];
      brands?: {
        /** @description Brand ID */
        brand?: string;
        /** @description Name of brand */
        name?: string;
      }[];
      categories?: {
        /** @description Category ID */
        category?: string;
        /** @description Name of category */
        name?: string;
      }[];
      /**
       * @description Sorted parts to render this CMS article, based on the configuration in Centra for
       *                 templates, with dynamic properties
       */
      parts?: {
        /** @description Template name for this part */
        template?: string;
        slots?: {
          /**
           * @description Possible values: 'textfield', 'image', 'slideshow', 'products', 'file', 'files', 'boolean', 'option', 'date', 'campaign', 'articlerelation', 'origin'. The slot type used. Explanation for each:
           *                                 [Slot properties](https://docs.centra.com/guides/cms/slot-properties)
           * @enum {string}
           */
          type?:
            | "textfield"
            | "image"
            | "slideshow"
            | "products"
            | "file"
            | "files"
            | "boolean"
            | "option"
            | "date"
            | "campaign"
            | "articlerelation"
            | "origin";
          /** @description If type=products is used, this is a list with the products */
          products?: {
            /** @description Text for the specific product */
            slotDescription?: string;
            product?: components["schemas"]["ProductModel"];
          }[];
        };
      }[];
    };
    /** @description Warehouse object */
    WarehouseModel: {
      /** @description Warehouse ID */
      warehouse?: string;
      /** @description Warehouse name */
      name?: string;
    };
    /** @description Requires shared secret. Lists products with multiple pricelists/markets */
    BundleInfoAllModel: {
      /**
       * @description Optional. If `pricelist=all`.
       *                         Object with Pricelist ID as the key, for each pricelist the product is in
       */
      prices?: {
        /** @description Integer. pricelist */
        priceList?: number;
        /** @description string. Formatted price with currency prefix/suffix. Price for the product */
        priceOfItems?: string;
        /** @description number. Price value as a float, example: 14.11. Price for the product */
        priceOfItemsAsNumber?: number;
        /** @description string. Formatted price with currency prefix/suffix. Price for the product */
        priceMin?: string;
        /** @description number. Price value as a float, example: 14.11. Price for the product */
        priceMinAsNumber?: number;
        /** @description string. Formatted price with currency prefix/suffix. Price for the product */
        priceMax?: string;
        /** @description number. Price value as a float, example: 14.11. Price for the product */
        priceMaxAsNumber?: number;
      }[];
      /** @description Integer. Optional. If `market=all`. List of the Market IDs the product is available in */
      markets?: number[];
      /** @description Integer. bundle id */
      bundle?: number;
      /**
       * @description Possible values: 'fixed', 'flexible'
       * @enum {string}
       */
      type?: "fixed" | "flexible";
      /**
       * @description Possible values: 'static', 'dynamic'
       * @enum {string}
       */
      priceType?: "static" | "dynamic";
    };
    /** @description Requires shared secret. Lists products with multiple pricelists/markets */
    BundleAllModel: {
      /**
       * @description Optional. If `pricelist=all`.
       *                         Object with Pricelist ID as the key, for each pricelist the product is in
       */
      prices?: {
        "*PricelistID*"?: {
          /** @description string. Formatted price with currency prefix/suffix. Price for the product */
          price?: string;
          /** @description number. Price value as a float, example: 14.11. Price for the product */
          priceAsNumber?: number;
          /** @description string. Formatted price with currency prefix/suffix. Price before discount */
          priceBeforeDiscount?: string;
          /** @description number. Price value as a float, example: 14.11. Price before discount */
          priceBeforeDiscountAsNumber?: number;
          /** @description Number. Percent of discount on this product's price */
          discountPercent?: number;
          /** @description If product should be marked with sale */
          showAsOnSale?: boolean;
          /** @description If product should be marked with new */
          showAsNew?: boolean;
        };
      };
      /** @description Integer. Optional. If `market=all`. List of the Market IDs the product is available in */
      markets?: number[];
      bundleInfo?: components["schemas"]["BundleInfoAllModel"];
      sections?: {
        /** @description Section ID */
        section?: string;
        /** @description Integer. Number of items for this section */
        quantity?: number;
        /** @description Integer. List of product ids in this section */
        products?: number[];
      }[];
    };
    /** @description Brick and mortar object */
    BrickAndMortarModel: {
      /** @description Integer. Brick and mortar ID */
      brickAndMortar?: number;
      /** @description Brick and mortar  Name */
      name?: string;
      /** @description longitude of brick and mortar */
      longitude?: string;
      /** @description latitude of brick and mortar */
      latitude?: string;
      /** @description brick and mortar country */
      country?: string;
      /** @description brick and mortar country code */
      countryCode?: string;
      /** @description brick and mortar state (if applicable) */
      state?: string;
      /** @description brick and mortar state code (if applicable) */
      stateCode?: string;
      /** @description brick and mortar type (one off 1,2,3) */
      type?: string;
    };
    /** @description Brick and mortar object */
    BrickAndMortarAuthModel: {
      /** @description Integer. Brick and mortar ID */
      brickAndMortar?: number;
      /** @description Brick and mortar  Name */
      name?: string;
      /** @description longitude of brick and mortar */
      longitude?: string;
      /** @description latitude of brick and mortar */
      latitude?: string;
      /** @description brick and mortar country */
      country?: string;
      /** @description brick and mortar country code */
      countryCode?: string;
      /** @description brick and mortar state (if applicable) */
      state?: string;
      /** @description brick and mortar state code (if applicable) */
      stateCode?: string;
      /** @description brick and mortar type (one off 1,2,3) */
      type?: string;
      /** @description Integer. Allocation rule ID connected to brick and mortar */
      allocationRule?: number;
      /** @description Integer. Warehouse ID connected to brick and mortar */
      warehouse?: number;
    };
  };
}

export interface operations {}

export interface external {}
